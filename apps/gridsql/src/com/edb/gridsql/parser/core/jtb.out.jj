//
// Generated by JTB 1.2.2
//

options {
   IGNORE_CASE = true;
   STATIC = false;
   UNICODE_INPUT = true;
   CHOICE_AMBIGUITY_CHECK = 3;
}

PARSER_BEGIN(CSQLParser)
package com.edb.gridsql.parser.core;

import java.io.PrintStream;
import com.edb.gridsql.parser.core.syntaxtree.*;
import java.util.Vector;


public class CSQLParser 
{
   public static void main(String[] args) throws ParseException,TokenMgrError
   {
      CSQLParser parser = new CSQLParser(System.in);
      process rootnode = parser.process(System.out);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CSQLParser)

SKIP :
{
   " "
   | "\n"
   | "\r"
   | "\t"
}

SKIP :
{
   <COMMENT_LINE: "--" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

SKIP :
{
   <COMMENT_BLOCK: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <CREATE_: "CREATE">
   | <COPY_: "COPY">
   | <TABLE_: "TABLE">
   | <TABLESPACE_: "TABLESPACE">
   | <LOCATION_: "LOCATION">
   | <TEMP_: "TEMP">
   | <NULL_: "NULL">
   | <UNIQUE_: "UNIQUE">
   | <SET_: "SET">
   | <DEFAULT_: "DEFAULT">
   | <UNSIGNED_: "UNSIGNED">
   | <ZEROFILL_: "ZEROFILL">
   | <BINARY_: "BINARY">
   | <CONSTRAINT_: "CONSTRAINT">
   | <PRIMARYKEY_: "PRIMARY" (" ")+ "KEY">
   | <FOREIGNKEY_: "FOREIGN" (" ")+ "KEY">
   | <REFERENCES_: "REFERENCES">
   | <ON_: "ON">
   | <UPDATE_: "UPDATE">
   | <DELETE_: "DELETE">
   | <PARTITIONINGKEY_: "PARTITIONING" (" ")+ "KEY">
   | <ROUND_ROBIN_: "ROUND" (" ")+ "ROBIN">
   | <WITH_XROWID_: "WITH" (" ")+ "XROWID">
   | <WITHOUT_XROWID_: "WITHOUT" (" ")+ "XROWID">
   | <PARENT_: "PARENT">
   | <PARTITION_WITH_: "PARTITION" (" ")+ "WITH">
   | <REPLICATED_: "REPLICATED">
   | <NODE_: "NODE">
   | <ADD_NODE_: "ADD NODE">
   | <MANUAL_: "MANUAL">
   | <DROP_NODE_: "DROP NODE">
   | <START_DB_: "START" (" ")+ "DATABASE">
   | <WAIT_TIMEOUT_: "WAITTIMEOUT" (" ")+>
   | <STOP_DB_: "STOP" (" ")+ "DATABASE">
   | <CREATE_DB_: (<CREATE_>) (" ")+ "DATABASE">
   | <DROP_DB_: "DROP" (" ")+ "DATABASE">
   | <SHUT_DOWN_: "SHUTDOWN">
   | <WITH_: "WITH">
   | <OWNER_: "OWNER">
   | <FORCE_: "FORCE">
   | <NODES_: "NODES">
   | <SERIAL_: "SERIAL">
   | <BIGSERIAL_: "BIGSERIAL">
   | <DROP_: "DROP">
   | <INSERT_: "INSERT">
   | <UNION_: "UNION">
   | <COLUMN_: "COLUMN">
   | <FIRST_: "FIRST">
   | <AFTER_: "AFTER">
   | <ALTER_: "ALTER">
   | <MODIFY_: "MODIFY">
   | <ADD_: "ADD">
   | <CHECK_: "CHECK">
   | <RENAME_: "RENAME">
   | <TO_: "TO">
   | <UPDATE_STAT_: "UPDATE" (" ")+ ("STAT" | "STATISTICS")>
   | <STATISTICS_: "STATISTICS">
   | <FOR_: "FOR">
   | <SHOW_: "SHOW">
   | <SHOW_AGENTS_: "SHOW" (" ")+ "AGENTS">
   | <SHOW_STATEMENTS_: "SHOW" (" ")+ "STATEMENTS">
   | <SHOW_DATABASES_: "SHOW" (" ")+ "DATABASES">
   | <SHOW_TABLES_: "SHOW" (" ")+ "TABLES">
   | <SHOW_TRAN_ISOLATION_: "SHOW" (" ")+ "TRANSACTION" (" ")+ "ISOLATION" (" ")+ "LEVEL">
   | <SERIALIZABLE_: "SERIALIZABLE">
   | <REPEATABLE_READ_: "REPEATABLE" (" ")+ "READ">
   | <READ_COMMITTED_: "READ" (" ")+ "COMMITTED">
   | <READ_UNCOMMITTED_: "READ" (" ")+ "UNCOMMITTED">
   | <ISOLATION_LEVEL_: "ISOLATION" (" ")+ "LEVEL">
   | <BEGIN_: "BEGIN">
   | <ROLLBACK_: "ROLLBACK">
   | <COMMIT_: "COMMIT">
   | <TRANSACTION_: "TRANSACTION">
   | <TRAN_: "TRAN">
   | <WORK_: "WORK">
   | <SHOW_CONSTRAINTS_: "SHOW" (" ")+ "CONSTRAINTS">
   | <DESCRIBE_: "DESCRIBE">
   | <KILL_: "KILL">
   | <PASSWORD_: "PASSWORD">
   | <DBA_: "DBA">
   | <RESOURCE_: "RESOURCE">
   | <STANDARD_: "STANDARD">
   | <PUBLIC_: "PUBLIC">
   | <GRANT_: "GRANT">
   | <REVOKE_: "REVOKE">
   | <OWNER_TO_: "OWNER" (" ")+ "TO">
   | <CAST_: "CAST">
   | <VIEW_: "VIEW">
   | <SHOW_TABLE_: "SHOW" (" ")+ "TABLE">
   | <SHOW_VIEW_: "SHOW" (" ")+ "VIEW">
   | <SHOW_VIEWS_: "SHOW" (" ")+ "VIEWS">
   | <SHOW_USERS_: "SHOW" (" ")+ "USERS">
   | <INHERITS_: "INHERITS">
   | <NO_: "NO">
   | <INHERIT_: "INHERIT">
   | <VACUUM_: "VACUUM">
   | <ANALYZE_: "ANALYZE">
   | <VERBOSE_: "VERBOSE">
   | <FREEZE_: "FREEZE">
   | <LIMIT_: "LIMIT">
   | <OFFSET_: "OFFSET">
   | <CLUSTER_: "CLUSTER">
   | <EXEC_: "EXEC" ("UTE")?>
   | <DIRECT_: "DIRECT">
   | <EXPLAIN_: "EXPLAIN">
   | <OIDS_: "OIDS">
   | <DELIMITER_: "DELIMITER">
   | <CSV_: "CSV">
   | <QUOTE_STRING_: "QUOTE">
   | <STDIN_: "STDIN">
   | <STDOUT_: "STDOUT">
   | <FORCE_NOT_NULL_: "FORCE" (" ")+ "NOT" (" ")+ "NULL">
   | <FORCE_QUOTE_: "FORCE" (" ")+ "QUOTE">
   | <DEALLOCATE_: "DEALLOCATE">
   | <PREPARE_: "PREPARE">
   | <LOCAL_: "LOCAL">
   | <GLOBAL_: "GLOBAL">
   | <ON_COMMIT_: "ON" (" ")+ "COMMIT">
   | <PRESERVE_ROWS_: "PRESERVE" (" ")+ "ROWS">
   | <DELETE_ROWS_: "DELETE" (" ")+ "ROWS">
   | <UNLISTEN_: "UNLISTEN">
}

TOKEN :
{
   <SELECT_: "SELECT">
   | <ALL_: "ALL">
   | <DISTINCT_: "DISTINCT">
   | <AS_: "AS">
   | <INTO_: "INTO">
   | <WHERE_: "WHERE">
   | <FROM_: "FROM">
   | <GROUP_BY_: "GROUP" (" ")+ "BY">
   | <IN_: "IN">
   | <BETWEEN_: "BETWEEN">
   | <EXISTS_: "EXISTS">
   | <ANY_: "ANY">
   | <SOME_: "SOME">
   | <NOT_: "NOT">
   | <AND_: "AND">
   | <IS_: "IS">
   | <OR_: "OR">
   | <LIKE_: "LIKE">
   | <ILIKE_: "ILIKE">
   | <SIMILAR_TO_: "SIMILAR" (" ")+ "TO">
   | <ESCAPE_: "ESCAPE">
   | <OVERLAPS_: "OVERLAPS">
   | <CASE_: "CASE">
   | <THEN_: "THEN">
   | <END_: "END">
   | <WHEN_: "WHEN">
   | <ELSE_: "ELSE">
   | <CROSS_: "CROSS">
   | <JOIN_: "JOIN">
   | <INNER_: "INNER">
   | <OUTER_: "OUTER">
   | <FULL_: "FULL">
   | <USING_: "USING">
   | <TRUE_: "TRUE">
   | <FALSE_: "FALSE">
   | <TEMPDOT_: "TEMP.">
   | <PUBLICDOT_: "PUBLIC.">
   | <NATURAL_: "NATURAL">
   | <LEFTOUTER_: "(+)">
   | <QPUBLICDOT_: "\"PUBLIC\".">
}

TOKEN :
{
   <PLUS_: "+">
   | <MINUS_: "-">
   | <UNARY_SIGN_: (<PLUS_> | <MINUS_>)>
   | <SQUARE_ROOT_: "|/">
   | <CUBE_ROOT_: "||/">
   | <FACTORIAL_: "!">
   | <FACTORIAL_PREFIX_: "!!">
   | <ABSOLUTE_: "@">
   | <AND_BITWISE_: "&">
   | <OR_BITWISE_: "|">
   | <XOR_BITWISE_: "#">
   | <SHIFT_LEFT_BITWISE_: "<<">
   | <SHIFT_RIGHT_BITWISE_: ">>">
   | <NOT_BITWISE_: "~">
   | <REGEX_MATCHES_CASE_INSTV_: "~*">
   | <REGEX_NOT_MATCHES_: "!~">
   | <REGEX_NOT_MATCHES_CASE_INSTV_: "!~*">
   | <BOTH: "BOTH">
   | <LEADING: "LEADING">
   | <TRAILING: "TRAILING">
   | <CONCAT_: "||">
   | <DIVIDE_: "/">
   | <DIV_: "DIV">
   | <MOD_: "MOD">
   | <MODULO_: "%">
   | <MODULE_: "MODULE">
   | <ASC_: "ASC">
   | <DESC_: "DESC">
   | <ORDER_BY_: "ORDER" (" ")+ "BY">
   | <HAVING_: "HAVING">
   | <CONTAINED_WITHIN_OR_EQUALS_: "<<=">
   | <CONTAINS_OR_EQUALS_: ">>=">
}

TOKEN :
{
   <AVERAGE_: "AVG">
   | <SQRT_: "SQRT">
   | <COUNT_: "COUNT">
   | <EXTRACT_: "EXTRACT">
   | <MAX_: "MAX">
   | <CURRENTDATE_: "CURRENT_DATE">
   | <CURRENT_TIME_: "CURRENT_TIME">
   | <CURRENT_TIMESTAMP_: "CURRENT_TIMESTAMP">
   | <TRUNC_: "TRUNC">
   | <TRUNCATE_: "TRUNCATE">
   | <CURRENT_USER_: "CURRENT_USER">
   | <USER_: "USER">
   | <YEAR_: "YEAR">
   | <LENGTH_: "LENGTH">
   | <LOWER_: "LOWER">
   | <MONTH_: "MONTH">
   | <HOUR_: "HOUR">
   | <MINUTE_: "MINUTE">
   | <SECOND_: "SECOND">
   | <SUBSTRING_: "SUBSTRING">
   | <TEMPORARY_: "TEMPORARY">
   | <NOW_: "NOW">
   | <ADDDATE_: "ADDDATE">
   | <ADDTIME_: "ADDTIME">
   | <DAYNAME_: "DAYNAME">
   | <SUBDATE_: "SUBDATE">
   | <SUBTIME_: "SUBTIME">
   | <DATEDIFF_: "DATEDIFF">
   | <MONTHNAME_: "MONTHNAME">
   | <DAYOFWEEK_: "DAYOFWEEK">
   | <DAYOFYEAR_: "DAYOFYEAR">
   | <DAYOFMONTH_: "DAYOFMONTH">
   | <WEEKOFYEAR_: "WEEKOFYEAR">
   | <DAY_: "DAY">
   | <QUARTER_: "QUARTER">
   | <WEEK_: "WEEK">
   | <ABS_: "ABS">
   | <CEIL_: "CEIL">
   | <CEILING_: "CEILING">
   | <EXP_: "EXP">
   | <FLOOR_: "FLOOR">
   | <LN_: "LN">
   | <LOG_: "LOG">
   | <LOG10_: "LOG10">
   | <PI_: "PI">
   | <POWER_: "POWER">
   | <ROUND_: "ROUND">
   | <SIGN_: "SIGN">
   | <ASIN_: "ASIN">
   | <ATAN_: "ATAN">
   | <ATAN2_: "ATAN2">
   | <ATN2_: "ATN2">
   | <COS_: "COS">
   | <ACOS_: "ACOS">
   | <COSH_: "COSH">
   | <COT_: "COT">
   | <DEGREE_: "DEGREES">
   | <RADIANS_: "RADIANS">
   | <SIN_: "SIN">
   | <TAN_: "TAN">
   | <DATABASE_: "DATABASE">
   | <VALUE_: "VALUE">
   | <VERSION_: "VERSION">
   | <MIN_: "MIN">
   | <STDDEV_: "STDDEV">
   | <STDDEV_POP_: "STDDEV_POP">
   | <STDDEV_SAMP_: "STDDEV_SAMP">
   | <SUM_: "SUM">
   | <VARIANCE_: "VARIANCE">
   | <VARIANCE_POP_: "VARIANCE_POP" | "VAR_POP">
   | <VARIANCE_SAMP_: "VARIANCE_SAMP" | "VAR_SAMP">
   | <ASCII_: "ASCII">
   | <INDEX_: "INDEX">
   | <SHOW_INDEXES_: "SHOW" (" ")+ "INDEXES">
   | <LEFT_: "LEFT">
   | <LPAD_: "LPAD">
   | <RPAD_: "RPAD">
   | <LTRIM_: "LTRIM">
   | <REPLACE_: "REPLACE">
   | <RIGHT_: "RIGHT">
   | <RTRIM_: "RTRIM">
   | <SUBSTR_: "SUBSTR">
   | <TRIM_: "TRIM">
   | <UPPER_: "UPPER">
   | <FIXED_: "FIXED">
   | <GREATEST_: "GREATEST">
   | <LEAST_: "LEAST">
   | <INSTR_: "INSTR">
   | <SOUNDEX_: "SOUNDEX">
   | <INITCAP_: "INITCAP">
   | <LFILL_: "LFILL">
   | <MAPCHAR_: "MAPCHAR">
   | <NUM_: "NUM">
   | <CONCAT_WORD: "CONCAT">
   | <CURTIME_: "CURTIME">
   | <CURDATE_: "CURDATE">
   | <TIMEOFDAY_: "TIMEOFDAY">
   | <ISFINITE_: "ISFINITE">
   | <DATETRUNC_: "DATE_TRUNC">
   | <DATEPART_: "DATE_PART">
   | <AGE_: "AGE">
   | <LOCALTIME_: "LOCALTIME">
   | <LOCALTIMESTAMP_: "LOCALTIMESTAMP">
   | <BIT_LENGTH_: "BIT_LENGTH">
   | <CHAR_LENGTH_: "CHAR_LENGTH">
   | <CHARACTER_LENGTH_: "CHARACTER_LENGTH">
   | <CONVERT_: "CONVERT">
   | <OCTET_LENGTH_: "OCTET_LENGTH">
   | <OVERLAY_: "OVERLAY">
   | <PLACING_: "PLACING">
   | <STORAGE_: "STORAGE">
   | <TYPE_: "TYPE">
   | <BTRIM_: "BTRIM">
   | <CHR_: "CHR">
   | <DECODE_: "DECODE">
   | <ENCODE_: "ENCODE">
   | <MD5_: "MD5">
   | <PG_CLIENT_ENCODING_: "PG_CLIENT_ENCODING">
   | <QUOTE_IDENT_: "QUOTE_IDENT">
   | <QUOTE_LITERAL_: "QUOTE_LITERAL">
   | <REPEAT_: "REPEAT">
   | <SPLIT_PART_: "SPLIT_PART">
   | <STRPOS_: "STRPOS">
   | <TO_ASCII_: "TO_ASCII">
   | <TO_HEX_: "TO_HEX">
   | <TRANSLATE_: "TRANSLATE">
   | <WIDTH_BUCKET_: "WIDTH_BUCKET">
   | <SETSEED_: "SETSEED">
   | <RANDOM_: "RANDOM">
   | <CBRT_: "CBRT">
   | <GET_BIT_: "GET_BIT">
   | <GET_BYTE_: "GET_BYTE">
   | <TO_DATE_: "TO_DATE">
   | <NVL_: "NVL">
   | <NVL2_: "NVL2">
   | <COALESCE_: "COALESCE">
   | <CLOCK_TIMESTAMP_: "CLOCK_TIMESTAMP">
   | <STATEMENT_TIMESTAMP_: "STATEMENT_TIMESTAMP">
   | <TRANSACTION_TIMESTAMP_: "TRANSACTION_TIMESTAMP">
   | <NULLIF_: "NULLIF">
   | <SET_BIT_: "SET_BIT">
   | <SET_BYTE_: "SET_BYTE">
   | <TO_CHAR_: "TO_CHAR">
   | <TO_NUMBER_: "TO_NUMBER">
   | <TO_TIMESTAMP_: "TO_TIMESTAMP">
   | <ADD_MONTHS_: "ADD_MONTHS">
   | <JUSTIFY_DAYS_: "JUSTIFY_DAYS">
   | <JUSTIFY_HOURS_: "JUSTIFY_HOURS">
   | <JUSTIFY_INTERVAL_: "JUSTIFY_INTERVAL">
   | <LAST_DAY_: "LAST_DAY">
   | <MONTHS_BETWEEN_: "MONTHS_BETWEEN">
   | <NEXT_DAY_: "NEXT_DAY">
   | <CURRENT_DATABASE_: "CURRENT_DATABASE">
   | <CURRENT_SCHEMA_: "CURRENT_SCHEMA">
   | <SYSDATE_: "SYSDATE">
   | <BIT_AND_: "BIT_AND">
   | <BIT_OR_: "BIT_OR">
   | <BOOL_AND_: "BOOL_AND">
   | <BOOL_OR_: "BOOL_OR">
   | <EVERY_: "EVERY">
   | <CORR_: "CORR">
   | <COVAR_POP_: "COVAR_POP">
   | <COVAR_SAMP_: "COVAR_SAMP">
   | <REGR_AVGX_: "REGR_AVGX">
   | <REGR_AVGY_: "REGR_AVGY">
   | <REGR_COUNT_: "REGR_COUNT">
   | <REGR_INTERCEPT_: "REGR_INTERCEPT">
   | <REGR_R2_: "REGR_R2">
   | <REGR_SLOPE_: "REGR_SLOPE">
   | <REGR_SXX_: "REGR_SXX">
   | <REGR_SXY_: "REGR_SXY">
   | <REGR_SYY_: "REGR_SYY">
   | <REGEXP_REPLACE_: "REGEXP_REPLACE">
   | <ABBREV_: "ABBREV">
   | <BROADCAST_: "BROADCAST">
   | <FAMILY_: "FAMILY">
   | <HOST_: "HOST">
   | <HOSTMASK_: "HOSTMASK">
   | <MASKLEN_: "MASKLEN">
   | <NETMASK_: "NETMASK">
   | <NETWORK_: "NETWORK">
   | <SET_MASKLEN_: "SET_MASKLEN">
}

TOKEN :
{
   <SMALLINT_: "SMALLINT">
   | <TINYINT_: "TINYINT">
   | <INT2_: "INT2">
   | <BIGINT_: "BIGINT">
   | <INT8_: "INT8">
   | <BIGINTEGER_: "BIGINTEGER">
   | <INT_: "INT">
   | <INTEGER_: "INTEGER">
   | <INT4_: "INT4">
   | <REAL_: "REAL">
   | <SMALLFLOAT_: "SMALLFLOAT">
   | <FLOAT_: "FLOAT">
   | <FLOAT4_: "FLOAT4">
   | <FLOAT8_: "FLOAT8">
   | <DECIMAL_: "DECIMAL">
   | <NUMERIC_: "NUMERIC">
   | <SMALLMONEY_: "SMALLMONEY">
   | <MONEY_: "MONEY">
   | <NUMBER_: "NUMBER">
   | <CHAR_: "CHAR">
   | <CHARACHTER_: "CHARACTER">
   | <VARCHAR_: "VARCHAR">
   | <TINYTEXT_: "TINYTEXT">
   | <VARCHAR2_: "VARCHAR2">
   | <DATE_: "DATE">
   | <TIME_: "TIME">
   | <TIMESTAMP_: "TIMESTAMP">
   | <WITH_TIMEZONE_: "WITH" (" ")+ "TIME" (" ")+ "ZONE">
   | <WITHOUT_TIMEZONE_: "WITHOUT" (" ")+ "TIME" (" ")+ "ZONE">
   | <DATETIME_: "DATETIME">
   | <SAMLLDATETIME_: "SMALLDATETIME">
   | <DEC_: "DEC">
   | <DOUBLE_PRECISION_: "DOUBLE" (" ")+ "PRECISION">
   | <NCHAR_: "NCHAR">
   | <NATIONAL_: "NATIONAL">
   | <VARYING_: "VARYING">
   | <BOOLEAN_: "BOOL" ("EAN")?>
   | <INTERVAL_: "INTERVAL">
   | <TEXT_: "TEXT">
   | <MEDIUMTEXT_: "MEDIUMTEXT">
   | <LONG_: "LONG">
   | <LVARCHAR_: "LVARCHAR">
   | <LONG_VARCHAR_: "LONG VARCHAR">
   | <LONGTEXT_: "LONGTEXT">
   | <CLOB_: "CLOB">
   | <BYTEA_: "BYTEA">
   | <BLOB_: "BLOB">
   | <VARBINARY_: "VARBINARY">
   | <LONG_RAW_: "LONG RAW">
   | <RAW_: "RAW">
   | <BYTE_: "BYTE">
   | <IMAGE_: "IMAGE">
   | <BIT_: "BIT">
   | <BITVARYING_: "BITVARYING">
   | <VARBIT_: "VARBIT">
   | <QUOTE: "\"">
   | <MACADDR_: "MACADDR">
   | <CIDR_: "CIDR">
   | <INET_: "INET">
}

TOKEN :
{
   <YEAR_FROM: "YEAR" (" ")* "FROM">
   | <QUARTER_FROM: "QUARTER" (" ")* "FROM">
   | <MONTH_FROM: "MONTH" (" ")* "FROM">
   | <WEEK_FROM: "WEEK" (" ")* "FROM">
   | <DAY_FROM: "DAY" (" ")* "FROM">
   | <DOY_FROM: "DOY" (" ")* "FROM">
   | <DOW_FROM: "DOW" (" ")* "FROM">
   | <DECADE_FROM: "DECADE" (" ")* "FROM">
   | <CENTURY_FROM: "CENTURY" (" ")* "FROM">
   | <HOUR_FROM: "HOUR" (" ")* "FROM">
   | <MINUTE_FROM: "MINUTE" (" ")* "FROM">
   | <SECOND_FROM: "SECOND" (" ")* "FROM">
   | <MILLISECOND_FROM: "MILLISECONDS" (" ")* "FROM">
   | <MILLENNIUM_FROM: "MILLENNIUM" (" ")* "FROM">
   | <MICROSECONDS_FROM: "MICROSECONDS" (" ")* "FROM">
   | <EPOCH_FROM: "EPOCH" (" ")* "FROM">
}

TOKEN :
{
   <POSITION_: "POSITION">
   | <VALUES_: "VALUES">
      {
         matchedToken.image = image.substring(0,image.length() - 1);
      }
}

TOKEN :
{
   <#SINGLEDIGIT: ["0"-"9"]>
   | <INT_LITERAL: (<SINGLEDIGIT>)+>
   | <DECIMAL_LITERAL: (<SINGLEDIGIT>)* "." (<SINGLEDIGIT>)+>
   | <SCIENTIFIC_LITERAL: (((<SINGLEDIGIT>)+)? ".")? (<SINGLEDIGIT>)+ "E" (["-", "+"])? (<SINGLEDIGIT>)+>
}

TOKEN :
{
   <STRING_LITERAL: "'" (~["'"])* ("''" (~["'"])*)* "'">
}

TOKEN :
{
   <PARAM_PLACE_HOLDER: "$" (<SINGLEDIGIT>)+>
}

TOKEN :
{
   <INTERVAL_LITERAL: "INTERVAL" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <DATE_LITERAL: "DATE" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TIME_LITERAL: "TIME" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TIMESTAMP_LITERAL: "TIMESTAMP" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TEXT_LITERAL: "TEXT" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <INTEGER_LITERAL: "INTEGER" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <MACADDR_LITERAL: "MACADDR" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <CIDR_LITERAL: "CIDR" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <INET_LITERAL: "INET" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
}

TOKEN :
{
   <BINARY_LITERAL: "b'" (("0" | "1"))+ "'">
   | <HEXDECIMAL_LITERAL: "x'" (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f"))+ "'">
}

TOKEN :
{
   <PARENTHESIS_START_: "(">
   | <PARENTHESIS_CLOSE_: ")">
   | <SEMICOLON_: ";">
}

TOKEN :
{
   <STAR_: "*">
}

numberValue numberValue(PrintStream prn) :
{
   FloatingPointNumber n0;

   {
   }
}
{
   n0=FloatingPointNumber(prn)
   
   { return new numberValue(n0); }
}

stringLiteral stringLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new stringLiteral(n0); }
}

TOKEN :
{
   <#LETTER: ["_", "a"-"z", "A"-"Z"]>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <SINGLEDIGIT>)*>
   | <QUOTED_IDENTIFIER: "\"" (~["\""])* ("\"\"" (~["\""])*)* "\"">
}

UnreservedWords UnreservedWords(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeSequence n155;
   NodeToken n156;
   Token n157;
   NodeToken n158;
   Token n159;
   NodeToken n160;
   Token n161;
   NodeToken n162;
   Token n163;
   NodeToken n164;
   Token n165;
   NodeToken n166;
   Token n167;
   NodeToken n168;
   Token n169;
   NodeToken n170;
   Token n171;
   NodeToken n172;
   Token n173;
   NodeToken n174;
   Token n175;
   NodeToken n176;
   Token n177;
   NodeToken n178;
   Token n179;
   NodeToken n180;
   Token n181;
   NodeToken n182;
   Token n183;
   NodeToken n184;
   Token n185;
   NodeToken n186;
   Token n187;
   NodeToken n188;
   Token n189;
   NodeToken n190;
   Token n191;
   NodeToken n192;
   Token n193;
   NodeToken n194;
   Token n195;
   NodeToken n196;
   Token n197;
   NodeToken n198;
   Token n199;
   NodeToken n200;
   Token n201;
   NodeToken n202;
   Token n203;
   NodeToken n204;
   Token n205;
   NodeToken n206;
   Token n207;
   NodeToken n208;
   Token n209;
   NodeToken n210;
   Token n211;
   NodeToken n212;
   Token n213;
   NodeToken n214;
   Token n215;
   NodeToken n216;
   Token n217;
   NodeToken n218;
   Token n219;
   NodeToken n220;
   Token n221;
   NodeToken n222;
   Token n223;
   NodeToken n224;
   Token n225;
   NodeToken n226;
   Token n227;
   NodeToken n228;
   Token n229;
   NodeToken n230;
   Token n231;
   NodeToken n232;
   Token n233;
   NodeToken n234;
   Token n235;
   NodeToken n236;
   Token n237;
   NodeToken n238;
   Token n239;
   NodeToken n240;
   Token n241;
   NodeToken n242;
   Token n243;
   NodeToken n244;
   Token n245;
   NodeToken n246;
   Token n247;
   NodeToken n248;
   Token n249;
   NodeToken n250;
   Token n251;
   NodeToken n252;
   Token n253;
   NodeToken n254;
   Token n255;
   NodeToken n256;
   Token n257;
   NodeToken n258;
   Token n259;
   NodeToken n260;
   Token n261;
   NodeToken n262;
   Token n263;
   NodeToken n264;
   Token n265;
   NodeToken n266;
   Token n267;
   NodeToken n268;
   Token n269;
   NodeToken n270;
   Token n271;
   NodeToken n272;
   Token n273;
   NodeToken n274;
   Token n275;
   NodeToken n276;
   Token n277;
   NodeToken n278;
   Token n279;
   NodeToken n280;
   Token n281;
   NodeToken n282;
   Token n283;
   NodeToken n284;
   Token n285;
   NodeToken n286;
   Token n287;
   NodeToken n288;
   Token n289;
   NodeToken n290;
   Token n291;
   NodeToken n292;
   Token n293;
   NodeToken n294;
   Token n295;
   NodeToken n296;
   Token n297;
   NodeToken n298;
   Token n299;
   NodeToken n300;
   Token n301;
   NodeToken n302;
   Token n303;
   NodeToken n304;
   Token n305;
   NodeToken n306;
   Token n307;
   NodeToken n308;
   Token n309;
   NodeToken n310;
   Token n311;
   NodeToken n312;
   Token n313;
   NodeToken n314;
   Token n315;
   NodeToken n316;
   Token n317;
   NodeToken n318;
   Token n319;
   NodeToken n320;
   Token n321;
   NodeToken n322;
   Token n323;
   NodeToken n324;
   Token n325;
   NodeToken n326;
   Token n327;
   NodeToken n328;
   Token n329;
   NodeToken n330;
   Token n331;
   NodeToken n332;
   Token n333;
   NodeToken n334;
   Token n335;
   NodeToken n336;
   Token n337;
   NodeToken n338;
   Token n339;
   NodeToken n340;
   Token n341;
   NodeToken n342;
   Token n343;
   NodeToken n344;
   Token n345;
   NodeToken n346;
   Token n347;
   NodeToken n348;
   Token n349;
   NodeToken n350;
   Token n351;
   NodeToken n352;
   Token n353;
   NodeToken n354;
   Token n355;
   NodeToken n356;
   Token n357;
   NodeToken n358;
   Token n359;
   NodeToken n360;
   Token n361;
   NodeToken n362;
   Token n363;
   NodeToken n364;
   Token n365;
   NodeToken n366;
   Token n367;
   NodeToken n368;
   Token n369;
   NodeToken n370;
   Token n371;
   NodeToken n372;
   Token n373;
   NodeToken n374;
   Token n375;
   NodeToken n376;
   Token n377;
   NodeToken n378;
   Token n379;
   NodeToken n380;
   Token n381;
   NodeToken n382;
   Token n383;
   NodeToken n384;
   Token n385;
   NodeToken n386;
   Token n387;
   NodeToken n388;
   Token n389;
   NodeToken n390;
   Token n391;
   NodeToken n392;
   Token n393;
   NodeToken n394;
   Token n395;
   NodeToken n396;
   Token n397;
   NodeToken n398;
   Token n399;
   NodeToken n400;
   Token n401;
   NodeToken n402;
   Token n403;
   NodeToken n404;
   Token n405;
   NodeToken n406;
   Token n407;
   NodeToken n408;
   Token n409;
   NodeToken n410;
   Token n411;
   NodeToken n412;
   Token n413;
   NodeToken n414;
   Token n415;
   NodeToken n416;
   Token n417;
   NodeToken n418;
   Token n419;
   NodeToken n420;
   Token n421;
   NodeToken n422;
   Token n423;
   NodeToken n424;
   Token n425;
   NodeToken n426;
   Token n427;
   NodeToken n428;
   Token n429;
   NodeToken n430;
   Token n431;
   NodeToken n432;
   Token n433;
   NodeToken n434;
   Token n435;
   NodeToken n436;
   Token n437;
   NodeToken n438;
   Token n439;
   NodeToken n440;
   Token n441;
   NodeToken n442;
   Token n443;
   NodeToken n444;
   Token n445;
   NodeToken n446;
   Token n447;
   NodeToken n448;
   Token n449;
   NodeToken n450;
   Token n451;
   NodeToken n452;
   Token n453;
   NodeToken n454;
   Token n455;
   NodeToken n456;
   Token n457;
   NodeToken n458;
   Token n459;
   NodeToken n460;
   Token n461;
   NodeToken n462;
   Token n463;
   NodeToken n464;
   Token n465;
   NodeToken n466;
   Token n467;
   NodeToken n468;
   Token n469;
   NodeToken n470;
   Token n471;

   {
   }
}
{
   (
      n2=<POSITION_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n4=<DATE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DAY_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<QUARTER_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      LOOKAHEAD(2)
      n10=<TIME_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      LOOKAHEAD(2)
      n12=<TIMESTAMP_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<WITH_TIMEZONE_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<WITHOUT_TIMEZONE_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<DATETIME_> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<SAMLLDATETIME_> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<PASSWORD_> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<AVERAGE_> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<SQRT_> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<COUNT_> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<EXTRACT_> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<MAX_> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<CURRENTDATE_> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<CURRENT_TIME_> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<CURRENT_TIMESTAMP_> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<TRUNC_> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<TRUNCATE_> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<USER_> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<YEAR_> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48=<LENGTH_> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50=<LOWER_> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52=<MONTH_> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54=<HOUR_> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56=<MINUTE_> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58=<SECOND_> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60=<SUBSTRING_> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62=<NOW_> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64=<ADDDATE_> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66=<ADDTIME_> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   |
      n68=<DAYNAME_> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n0 = new NodeChoice(n67, 33); }
   |
      n70=<SUBDATE_> { n69 = JTBToolkit.makeNodeToken(n70); }
      { n0 = new NodeChoice(n69, 34); }
   |
      n72=<SUBTIME_> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n0 = new NodeChoice(n71, 35); }
   |
      n74=<DATEDIFF_> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n0 = new NodeChoice(n73, 36); }
   |
      n76=<MONTHNAME_> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n0 = new NodeChoice(n75, 37); }
   |
      n78=<DAYOFWEEK_> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n0 = new NodeChoice(n77, 38); }
   |
      n80=<DAYOFYEAR_> { n79 = JTBToolkit.makeNodeToken(n80); }
      { n0 = new NodeChoice(n79, 39); }
   |
      n82=<DAYOFMONTH_> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n0 = new NodeChoice(n81, 40); }
   |
      n84=<WEEKOFYEAR_> { n83 = JTBToolkit.makeNodeToken(n84); }
      { n0 = new NodeChoice(n83, 41); }
   |
      n86=<WEEK_> { n85 = JTBToolkit.makeNodeToken(n86); }
      { n0 = new NodeChoice(n85, 42); }
   |
      n88=<ABS_> { n87 = JTBToolkit.makeNodeToken(n88); }
      { n0 = new NodeChoice(n87, 43); }
   |
      n90=<CEIL_> { n89 = JTBToolkit.makeNodeToken(n90); }
      { n0 = new NodeChoice(n89, 44); }
   |
      n92=<CEILING_> { n91 = JTBToolkit.makeNodeToken(n92); }
      { n0 = new NodeChoice(n91, 45); }
   |
      n94=<EXP_> { n93 = JTBToolkit.makeNodeToken(n94); }
      { n0 = new NodeChoice(n93, 46); }
   |
      n96=<FLOOR_> { n95 = JTBToolkit.makeNodeToken(n96); }
      { n0 = new NodeChoice(n95, 47); }
   |
      n98=<LN_> { n97 = JTBToolkit.makeNodeToken(n98); }
      { n0 = new NodeChoice(n97, 48); }
   |
      n100=<LOG_> { n99 = JTBToolkit.makeNodeToken(n100); }
      { n0 = new NodeChoice(n99, 49); }
   |
      n102=<LOG10_> { n101 = JTBToolkit.makeNodeToken(n102); }
      { n0 = new NodeChoice(n101, 50); }
   |
      n104=<PI_> { n103 = JTBToolkit.makeNodeToken(n104); }
      { n0 = new NodeChoice(n103, 51); }
   |
      n106=<POWER_> { n105 = JTBToolkit.makeNodeToken(n106); }
      { n0 = new NodeChoice(n105, 52); }
   |
      n108=<ROUND_> { n107 = JTBToolkit.makeNodeToken(n108); }
      { n0 = new NodeChoice(n107, 53); }
   |
      n110=<SIGN_> { n109 = JTBToolkit.makeNodeToken(n110); }
      { n0 = new NodeChoice(n109, 54); }
   |
      n112=<ASIN_> { n111 = JTBToolkit.makeNodeToken(n112); }
      { n0 = new NodeChoice(n111, 55); }
   |
      n114=<ATAN_> { n113 = JTBToolkit.makeNodeToken(n114); }
      { n0 = new NodeChoice(n113, 56); }
   |
      n116=<ATAN2_> { n115 = JTBToolkit.makeNodeToken(n116); }
      { n0 = new NodeChoice(n115, 57); }
   |
      n118=<ATN2_> { n117 = JTBToolkit.makeNodeToken(n118); }
      { n0 = new NodeChoice(n117, 58); }
   |
      n120=<COS_> { n119 = JTBToolkit.makeNodeToken(n120); }
      { n0 = new NodeChoice(n119, 59); }
   |
      n122=<ACOS_> { n121 = JTBToolkit.makeNodeToken(n122); }
      { n0 = new NodeChoice(n121, 60); }
   |
      n124=<COSH_> { n123 = JTBToolkit.makeNodeToken(n124); }
      { n0 = new NodeChoice(n123, 61); }
   |
      n126=<COT_> { n125 = JTBToolkit.makeNodeToken(n126); }
      { n0 = new NodeChoice(n125, 62); }
   |
      n128=<DEGREE_> { n127 = JTBToolkit.makeNodeToken(n128); }
      { n0 = new NodeChoice(n127, 63); }
   |
      n130=<RADIANS_> { n129 = JTBToolkit.makeNodeToken(n130); }
      { n0 = new NodeChoice(n129, 64); }
   |
      n132=<SIN_> { n131 = JTBToolkit.makeNodeToken(n132); }
      { n0 = new NodeChoice(n131, 65); }
   |
      n134=<TAN_> { n133 = JTBToolkit.makeNodeToken(n134); }
      { n0 = new NodeChoice(n133, 66); }
   |
      n136=<DATABASE_> { n135 = JTBToolkit.makeNodeToken(n136); }
      { n0 = new NodeChoice(n135, 67); }
   |
      n138=<VALUE_> { n137 = JTBToolkit.makeNodeToken(n138); }
      { n0 = new NodeChoice(n137, 68); }
   |
      n140=<VERSION_> { n139 = JTBToolkit.makeNodeToken(n140); }
      { n0 = new NodeChoice(n139, 69); }
   |
      n142=<MIN_> { n141 = JTBToolkit.makeNodeToken(n142); }
      { n0 = new NodeChoice(n141, 70); }
   |
      n144=<STDDEV_> { n143 = JTBToolkit.makeNodeToken(n144); }
      { n0 = new NodeChoice(n143, 71); }
   |
      n146=<STDDEV_POP_> { n145 = JTBToolkit.makeNodeToken(n146); }
      { n0 = new NodeChoice(n145, 72); }
   |
      n148=<STDDEV_SAMP_> { n147 = JTBToolkit.makeNodeToken(n148); }
      { n0 = new NodeChoice(n147, 73); }
   |
      n150=<SUM_> { n149 = JTBToolkit.makeNodeToken(n150); }
      { n0 = new NodeChoice(n149, 74); }
   |
      n152=<VARIANCE_> { n151 = JTBToolkit.makeNodeToken(n152); }
      { n0 = new NodeChoice(n151, 75); }
   |
      n154=<VARIANCE_POP_> { n153 = JTBToolkit.makeNodeToken(n154); }
      { n0 = new NodeChoice(n153, 76); }
   |
      { n155 = new NodeSequence(2); }
      n157=<VARIANCE_SAMP_> { n156 = JTBToolkit.makeNodeToken(n157); }
      { n155.addNode(n156); }
      n159=<ASCII_> { n158 = JTBToolkit.makeNodeToken(n159); }
      { n155.addNode(n158); }
      { n0 = new NodeChoice(n155, 77); }
   |
      n161=<LPAD_> { n160 = JTBToolkit.makeNodeToken(n161); }
      { n0 = new NodeChoice(n160, 78); }
   |
      n163=<RPAD_> { n162 = JTBToolkit.makeNodeToken(n163); }
      { n0 = new NodeChoice(n162, 79); }
   |
      n165=<LTRIM_> { n164 = JTBToolkit.makeNodeToken(n165); }
      { n0 = new NodeChoice(n164, 80); }
   |
      n167=<REPLACE_> { n166 = JTBToolkit.makeNodeToken(n167); }
      { n0 = new NodeChoice(n166, 81); }
   |
      n169=<RTRIM_> { n168 = JTBToolkit.makeNodeToken(n169); }
      { n0 = new NodeChoice(n168, 82); }
   |
      n171=<SUBSTR_> { n170 = JTBToolkit.makeNodeToken(n171); }
      { n0 = new NodeChoice(n170, 83); }
   |
      n173=<TRIM_> { n172 = JTBToolkit.makeNodeToken(n173); }
      { n0 = new NodeChoice(n172, 84); }
   |
      n175=<UPPER_> { n174 = JTBToolkit.makeNodeToken(n175); }
      { n0 = new NodeChoice(n174, 85); }
   |
      n177=<FIXED_> { n176 = JTBToolkit.makeNodeToken(n177); }
      { n0 = new NodeChoice(n176, 86); }
   |
      n179=<GREATEST_> { n178 = JTBToolkit.makeNodeToken(n179); }
      { n0 = new NodeChoice(n178, 87); }
   |
      n181=<LEAST_> { n180 = JTBToolkit.makeNodeToken(n181); }
      { n0 = new NodeChoice(n180, 88); }
   |
      n183=<INSTR_> { n182 = JTBToolkit.makeNodeToken(n183); }
      { n0 = new NodeChoice(n182, 89); }
   |
      n185=<SOUNDEX_> { n184 = JTBToolkit.makeNodeToken(n185); }
      { n0 = new NodeChoice(n184, 90); }
   |
      n187=<INITCAP_> { n186 = JTBToolkit.makeNodeToken(n187); }
      { n0 = new NodeChoice(n186, 91); }
   |
      n189=<LFILL_> { n188 = JTBToolkit.makeNodeToken(n189); }
      { n0 = new NodeChoice(n188, 92); }
   |
      n191=<MAPCHAR_> { n190 = JTBToolkit.makeNodeToken(n191); }
      { n0 = new NodeChoice(n190, 93); }
   |
      n193=<NUM_> { n192 = JTBToolkit.makeNodeToken(n193); }
      { n0 = new NodeChoice(n192, 94); }
   |
      n195=<CONCAT_WORD> { n194 = JTBToolkit.makeNodeToken(n195); }
      { n0 = new NodeChoice(n194, 95); }
   |
      n197=<CURTIME_> { n196 = JTBToolkit.makeNodeToken(n197); }
      { n0 = new NodeChoice(n196, 96); }
   |
      n199=<CURDATE_> { n198 = JTBToolkit.makeNodeToken(n199); }
      { n0 = new NodeChoice(n198, 97); }
   |
      n201=<TIMEOFDAY_> { n200 = JTBToolkit.makeNodeToken(n201); }
      { n0 = new NodeChoice(n200, 98); }
   |
      n203=<ISFINITE_> { n202 = JTBToolkit.makeNodeToken(n203); }
      { n0 = new NodeChoice(n202, 99); }
   |
      n205=<DATETRUNC_> { n204 = JTBToolkit.makeNodeToken(n205); }
      { n0 = new NodeChoice(n204, 100); }
   |
      n207=<DATEPART_> { n206 = JTBToolkit.makeNodeToken(n207); }
      { n0 = new NodeChoice(n206, 101); }
   |
      n209=<AGE_> { n208 = JTBToolkit.makeNodeToken(n209); }
      { n0 = new NodeChoice(n208, 102); }
   |
      n211=<LOCALTIME_> { n210 = JTBToolkit.makeNodeToken(n211); }
      { n0 = new NodeChoice(n210, 103); }
   |
      n213=<LOCALTIMESTAMP_> { n212 = JTBToolkit.makeNodeToken(n213); }
      { n0 = new NodeChoice(n212, 104); }
   |
      n215=<BIT_LENGTH_> { n214 = JTBToolkit.makeNodeToken(n215); }
      { n0 = new NodeChoice(n214, 105); }
   |
      n217=<CHAR_LENGTH_> { n216 = JTBToolkit.makeNodeToken(n217); }
      { n0 = new NodeChoice(n216, 106); }
   |
      n219=<CHARACTER_LENGTH_> { n218 = JTBToolkit.makeNodeToken(n219); }
      { n0 = new NodeChoice(n218, 107); }
   |
      n221=<CONVERT_> { n220 = JTBToolkit.makeNodeToken(n221); }
      { n0 = new NodeChoice(n220, 108); }
   |
      n223=<OCTET_LENGTH_> { n222 = JTBToolkit.makeNodeToken(n223); }
      { n0 = new NodeChoice(n222, 109); }
   |
      n225=<OVERLAY_> { n224 = JTBToolkit.makeNodeToken(n225); }
      { n0 = new NodeChoice(n224, 110); }
   |
      n227=<PLACING_> { n226 = JTBToolkit.makeNodeToken(n227); }
      { n0 = new NodeChoice(n226, 111); }
   |
      n229=<STORAGE_> { n228 = JTBToolkit.makeNodeToken(n229); }
      { n0 = new NodeChoice(n228, 112); }
   |
      n231=<TYPE_> { n230 = JTBToolkit.makeNodeToken(n231); }
      { n0 = new NodeChoice(n230, 113); }
   |
      n233=<BTRIM_> { n232 = JTBToolkit.makeNodeToken(n233); }
      { n0 = new NodeChoice(n232, 114); }
   |
      n235=<CHR_> { n234 = JTBToolkit.makeNodeToken(n235); }
      { n0 = new NodeChoice(n234, 115); }
   |
      n237=<DECODE_> { n236 = JTBToolkit.makeNodeToken(n237); }
      { n0 = new NodeChoice(n236, 116); }
   |
      n239=<ENCODE_> { n238 = JTBToolkit.makeNodeToken(n239); }
      { n0 = new NodeChoice(n238, 117); }
   |
      n241=<MD5_> { n240 = JTBToolkit.makeNodeToken(n241); }
      { n0 = new NodeChoice(n240, 118); }
   |
      n243=<PG_CLIENT_ENCODING_> { n242 = JTBToolkit.makeNodeToken(n243); }
      { n0 = new NodeChoice(n242, 119); }
   |
      n245=<QUOTE_IDENT_> { n244 = JTBToolkit.makeNodeToken(n245); }
      { n0 = new NodeChoice(n244, 120); }
   |
      n247=<QUOTE_LITERAL_> { n246 = JTBToolkit.makeNodeToken(n247); }
      { n0 = new NodeChoice(n246, 121); }
   |
      n249=<REPEAT_> { n248 = JTBToolkit.makeNodeToken(n249); }
      { n0 = new NodeChoice(n248, 122); }
   |
      n251=<SPLIT_PART_> { n250 = JTBToolkit.makeNodeToken(n251); }
      { n0 = new NodeChoice(n250, 123); }
   |
      n253=<STRPOS_> { n252 = JTBToolkit.makeNodeToken(n253); }
      { n0 = new NodeChoice(n252, 124); }
   |
      n255=<TO_ASCII_> { n254 = JTBToolkit.makeNodeToken(n255); }
      { n0 = new NodeChoice(n254, 125); }
   |
      n257=<TO_HEX_> { n256 = JTBToolkit.makeNodeToken(n257); }
      { n0 = new NodeChoice(n256, 126); }
   |
      n259=<TRANSLATE_> { n258 = JTBToolkit.makeNodeToken(n259); }
      { n0 = new NodeChoice(n258, 127); }
   |
      n261=<WIDTH_BUCKET_> { n260 = JTBToolkit.makeNodeToken(n261); }
      { n0 = new NodeChoice(n260, 128); }
   |
      n263=<SETSEED_> { n262 = JTBToolkit.makeNodeToken(n263); }
      { n0 = new NodeChoice(n262, 129); }
   |
      n265=<RANDOM_> { n264 = JTBToolkit.makeNodeToken(n265); }
      { n0 = new NodeChoice(n264, 130); }
   |
      n267=<CBRT_> { n266 = JTBToolkit.makeNodeToken(n267); }
      { n0 = new NodeChoice(n266, 131); }
   |
      n269=<GET_BIT_> { n268 = JTBToolkit.makeNodeToken(n269); }
      { n0 = new NodeChoice(n268, 132); }
   |
      n271=<GET_BYTE_> { n270 = JTBToolkit.makeNodeToken(n271); }
      { n0 = new NodeChoice(n270, 133); }
   |
      n273=<TO_DATE_> { n272 = JTBToolkit.makeNodeToken(n273); }
      { n0 = new NodeChoice(n272, 134); }
   |
      n275=<NVL_> { n274 = JTBToolkit.makeNodeToken(n275); }
      { n0 = new NodeChoice(n274, 135); }
   |
      n277=<NVL2_> { n276 = JTBToolkit.makeNodeToken(n277); }
      { n0 = new NodeChoice(n276, 136); }
   |
      n279=<CLOCK_TIMESTAMP_> { n278 = JTBToolkit.makeNodeToken(n279); }
      { n0 = new NodeChoice(n278, 137); }
   |
      n281=<STATEMENT_TIMESTAMP_> { n280 = JTBToolkit.makeNodeToken(n281); }
      { n0 = new NodeChoice(n280, 138); }
   |
      n283=<TRANSACTION_TIMESTAMP_> { n282 = JTBToolkit.makeNodeToken(n283); }
      { n0 = new NodeChoice(n282, 139); }
   |
      n285=<SMALLINT_> { n284 = JTBToolkit.makeNodeToken(n285); }
      { n0 = new NodeChoice(n284, 140); }
   |
      n287=<TINYINT_> { n286 = JTBToolkit.makeNodeToken(n287); }
      { n0 = new NodeChoice(n286, 141); }
   |
      n289=<INT2_> { n288 = JTBToolkit.makeNodeToken(n289); }
      { n0 = new NodeChoice(n288, 142); }
   |
      n291=<BYTEA_> { n290 = JTBToolkit.makeNodeToken(n291); }
      { n0 = new NodeChoice(n290, 143); }
   |
      n293=<BIGINT_> { n292 = JTBToolkit.makeNodeToken(n293); }
      { n0 = new NodeChoice(n292, 144); }
   |
      n295=<INT8_> { n294 = JTBToolkit.makeNodeToken(n295); }
      { n0 = new NodeChoice(n294, 145); }
   |
      n297=<BIGINTEGER_> { n296 = JTBToolkit.makeNodeToken(n297); }
      { n0 = new NodeChoice(n296, 146); }
   |
      n299=<INT_> { n298 = JTBToolkit.makeNodeToken(n299); }
      { n0 = new NodeChoice(n298, 147); }
   |
      n301=<INTEGER_> { n300 = JTBToolkit.makeNodeToken(n301); }
      { n0 = new NodeChoice(n300, 148); }
   |
      n303=<INT4_> { n302 = JTBToolkit.makeNodeToken(n303); }
      { n0 = new NodeChoice(n302, 149); }
   |
      n305=<REAL_> { n304 = JTBToolkit.makeNodeToken(n305); }
      { n0 = new NodeChoice(n304, 150); }
   |
      n307=<SMALLFLOAT_> { n306 = JTBToolkit.makeNodeToken(n307); }
      { n0 = new NodeChoice(n306, 151); }
   |
      n309=<FLOAT_> { n308 = JTBToolkit.makeNodeToken(n309); }
      { n0 = new NodeChoice(n308, 152); }
   |
      n311=<FLOAT4_> { n310 = JTBToolkit.makeNodeToken(n311); }
      { n0 = new NodeChoice(n310, 153); }
   |
      n313=<FLOAT8_> { n312 = JTBToolkit.makeNodeToken(n313); }
      { n0 = new NodeChoice(n312, 154); }
   |
      n315=<DECIMAL_> { n314 = JTBToolkit.makeNodeToken(n315); }
      { n0 = new NodeChoice(n314, 155); }
   |
      n317=<NUMERIC_> { n316 = JTBToolkit.makeNodeToken(n317); }
      { n0 = new NodeChoice(n316, 156); }
   |
      n319=<SMALLMONEY_> { n318 = JTBToolkit.makeNodeToken(n319); }
      { n0 = new NodeChoice(n318, 157); }
   |
      n321=<MONEY_> { n320 = JTBToolkit.makeNodeToken(n321); }
      { n0 = new NodeChoice(n320, 158); }
   |
      n323=<NUMBER_> { n322 = JTBToolkit.makeNodeToken(n323); }
      { n0 = new NodeChoice(n322, 159); }
   |
      n325=<CHAR_> { n324 = JTBToolkit.makeNodeToken(n325); }
      { n0 = new NodeChoice(n324, 160); }
   |
      n327=<CHARACHTER_> { n326 = JTBToolkit.makeNodeToken(n327); }
      { n0 = new NodeChoice(n326, 161); }
   |
      n329=<VARCHAR_> { n328 = JTBToolkit.makeNodeToken(n329); }
      { n0 = new NodeChoice(n328, 162); }
   |
      n331=<TINYTEXT_> { n330 = JTBToolkit.makeNodeToken(n331); }
      { n0 = new NodeChoice(n330, 163); }
   |
      n333=<VARCHAR2_> { n332 = JTBToolkit.makeNodeToken(n333); }
      { n0 = new NodeChoice(n332, 164); }
   |
      n335=<DATE_> { n334 = JTBToolkit.makeNodeToken(n335); }
      { n0 = new NodeChoice(n334, 165); }
   |
      n337=<TIME_> { n336 = JTBToolkit.makeNodeToken(n337); }
      { n0 = new NodeChoice(n336, 166); }
   |
      n339=<TIMESTAMP_> { n338 = JTBToolkit.makeNodeToken(n339); }
      { n0 = new NodeChoice(n338, 167); }
   |
      n341=<DEC_> { n340 = JTBToolkit.makeNodeToken(n341); }
      { n0 = new NodeChoice(n340, 168); }
   |
      n343=<DOUBLE_PRECISION_> { n342 = JTBToolkit.makeNodeToken(n343); }
      { n0 = new NodeChoice(n342, 169); }
   |
      n345=<NCHAR_> { n344 = JTBToolkit.makeNodeToken(n345); }
      { n0 = new NodeChoice(n344, 170); }
   |
      n347=<NATIONAL_> { n346 = JTBToolkit.makeNodeToken(n347); }
      { n0 = new NodeChoice(n346, 171); }
   |
      n349=<VARYING_> { n348 = JTBToolkit.makeNodeToken(n349); }
      { n0 = new NodeChoice(n348, 172); }
   |
      n351=<BOOLEAN_> { n350 = JTBToolkit.makeNodeToken(n351); }
      { n0 = new NodeChoice(n350, 173); }
   |
      n353=<INTERVAL_> { n352 = JTBToolkit.makeNodeToken(n353); }
      { n0 = new NodeChoice(n352, 174); }
   |
      n355=<TEXT_> { n354 = JTBToolkit.makeNodeToken(n355); }
      { n0 = new NodeChoice(n354, 175); }
   |
      n357=<MEDIUMTEXT_> { n356 = JTBToolkit.makeNodeToken(n357); }
      { n0 = new NodeChoice(n356, 176); }
   |
      n359=<LVARCHAR_> { n358 = JTBToolkit.makeNodeToken(n359); }
      { n0 = new NodeChoice(n358, 177); }
   |
      n361=<LONGTEXT_> { n360 = JTBToolkit.makeNodeToken(n361); }
      { n0 = new NodeChoice(n360, 178); }
   |
      n363=<LONG_VARCHAR_> { n362 = JTBToolkit.makeNodeToken(n363); }
      { n0 = new NodeChoice(n362, 179); }
   |
      n365=<LONG_> { n364 = JTBToolkit.makeNodeToken(n365); }
      { n0 = new NodeChoice(n364, 180); }
   |
      n367=<CLOB_> { n366 = JTBToolkit.makeNodeToken(n367); }
      { n0 = new NodeChoice(n366, 181); }
   |
      n369=<BLOB_> { n368 = JTBToolkit.makeNodeToken(n369); }
      { n0 = new NodeChoice(n368, 182); }
   |
      n371=<BINARY_> { n370 = JTBToolkit.makeNodeToken(n371); }
      { n0 = new NodeChoice(n370, 183); }
   |
      n373=<VARBINARY_> { n372 = JTBToolkit.makeNodeToken(n373); }
      { n0 = new NodeChoice(n372, 184); }
   |
      n375=<RAW_> { n374 = JTBToolkit.makeNodeToken(n375); }
      { n0 = new NodeChoice(n374, 185); }
   |
      n377=<LONG_RAW_> { n376 = JTBToolkit.makeNodeToken(n377); }
      { n0 = new NodeChoice(n376, 186); }
   |
      n379=<IMAGE_> { n378 = JTBToolkit.makeNodeToken(n379); }
      { n0 = new NodeChoice(n378, 187); }
   |
      n381=<BYTE_> { n380 = JTBToolkit.makeNodeToken(n381); }
      { n0 = new NodeChoice(n380, 188); }
   |
      n383=<CLUSTER_> { n382 = JTBToolkit.makeNodeToken(n383); }
      { n0 = new NodeChoice(n382, 189); }
   |
      n385=<CURRENT_USER_> { n384 = JTBToolkit.makeNodeToken(n385); }
      { n0 = new NodeChoice(n384, 190); }
   |
      n387=<NULLIF_> { n386 = JTBToolkit.makeNodeToken(n387); }
      { n0 = new NodeChoice(n386, 191); }
   |
      n389=<SET_BIT_> { n388 = JTBToolkit.makeNodeToken(n389); }
      { n0 = new NodeChoice(n388, 192); }
   |
      n391=<SET_BYTE_> { n390 = JTBToolkit.makeNodeToken(n391); }
      { n0 = new NodeChoice(n390, 193); }
   |
      n393=<TO_CHAR_> { n392 = JTBToolkit.makeNodeToken(n393); }
      { n0 = new NodeChoice(n392, 194); }
   |
      n395=<TO_NUMBER_> { n394 = JTBToolkit.makeNodeToken(n395); }
      { n0 = new NodeChoice(n394, 195); }
   |
      n397=<TO_TIMESTAMP_> { n396 = JTBToolkit.makeNodeToken(n397); }
      { n0 = new NodeChoice(n396, 196); }
   |
      n399=<ADD_MONTHS_> { n398 = JTBToolkit.makeNodeToken(n399); }
      { n0 = new NodeChoice(n398, 197); }
   |
      n401=<JUSTIFY_DAYS_> { n400 = JTBToolkit.makeNodeToken(n401); }
      { n0 = new NodeChoice(n400, 198); }
   |
      n403=<JUSTIFY_HOURS_> { n402 = JTBToolkit.makeNodeToken(n403); }
      { n0 = new NodeChoice(n402, 199); }
   |
      n405=<JUSTIFY_INTERVAL_> { n404 = JTBToolkit.makeNodeToken(n405); }
      { n0 = new NodeChoice(n404, 200); }
   |
      n407=<LAST_DAY_> { n406 = JTBToolkit.makeNodeToken(n407); }
      { n0 = new NodeChoice(n406, 201); }
   |
      n409=<MONTHS_BETWEEN_> { n408 = JTBToolkit.makeNodeToken(n409); }
      { n0 = new NodeChoice(n408, 202); }
   |
      n411=<NEXT_DAY_> { n410 = JTBToolkit.makeNodeToken(n411); }
      { n0 = new NodeChoice(n410, 203); }
   |
      n413=<CURRENT_DATABASE_> { n412 = JTBToolkit.makeNodeToken(n413); }
      { n0 = new NodeChoice(n412, 204); }
   |
      n415=<CURRENT_SCHEMA_> { n414 = JTBToolkit.makeNodeToken(n415); }
      { n0 = new NodeChoice(n414, 205); }
   |
      n417=<SYSDATE_> { n416 = JTBToolkit.makeNodeToken(n417); }
      { n0 = new NodeChoice(n416, 206); }
   |
      n419=<BIT_AND_> { n418 = JTBToolkit.makeNodeToken(n419); }
      { n0 = new NodeChoice(n418, 207); }
   |
      n421=<BIT_OR_> { n420 = JTBToolkit.makeNodeToken(n421); }
      { n0 = new NodeChoice(n420, 208); }
   |
      n423=<BOOL_AND_> { n422 = JTBToolkit.makeNodeToken(n423); }
      { n0 = new NodeChoice(n422, 209); }
   |
      n425=<BOOL_OR_> { n424 = JTBToolkit.makeNodeToken(n425); }
      { n0 = new NodeChoice(n424, 210); }
   |
      n427=<EVERY_> { n426 = JTBToolkit.makeNodeToken(n427); }
      { n0 = new NodeChoice(n426, 211); }
   |
      n429=<CORR_> { n428 = JTBToolkit.makeNodeToken(n429); }
      { n0 = new NodeChoice(n428, 212); }
   |
      n431=<COVAR_POP_> { n430 = JTBToolkit.makeNodeToken(n431); }
      { n0 = new NodeChoice(n430, 213); }
   |
      n433=<COVAR_SAMP_> { n432 = JTBToolkit.makeNodeToken(n433); }
      { n0 = new NodeChoice(n432, 214); }
   |
      n435=<REGR_AVGX_> { n434 = JTBToolkit.makeNodeToken(n435); }
      { n0 = new NodeChoice(n434, 215); }
   |
      n437=<REGR_AVGY_> { n436 = JTBToolkit.makeNodeToken(n437); }
      { n0 = new NodeChoice(n436, 216); }
   |
      n439=<REGR_COUNT_> { n438 = JTBToolkit.makeNodeToken(n439); }
      { n0 = new NodeChoice(n438, 217); }
   |
      n441=<REGR_INTERCEPT_> { n440 = JTBToolkit.makeNodeToken(n441); }
      { n0 = new NodeChoice(n440, 218); }
   |
      n443=<REGR_R2_> { n442 = JTBToolkit.makeNodeToken(n443); }
      { n0 = new NodeChoice(n442, 219); }
   |
      n445=<REGR_SLOPE_> { n444 = JTBToolkit.makeNodeToken(n445); }
      { n0 = new NodeChoice(n444, 220); }
   |
      n447=<REGR_SXX_> { n446 = JTBToolkit.makeNodeToken(n447); }
      { n0 = new NodeChoice(n446, 221); }
   |
      n449=<REGR_SXY_> { n448 = JTBToolkit.makeNodeToken(n449); }
      { n0 = new NodeChoice(n448, 222); }
   |
      n451=<REGR_SYY_> { n450 = JTBToolkit.makeNodeToken(n451); }
      { n0 = new NodeChoice(n450, 223); }
   |
      n453=<REGEXP_REPLACE_> { n452 = JTBToolkit.makeNodeToken(n453); }
      { n0 = new NodeChoice(n452, 224); }
   |
      n455=<ABBREV_> { n454 = JTBToolkit.makeNodeToken(n455); }
      { n0 = new NodeChoice(n454, 225); }
   |
      n457=<BROADCAST_> { n456 = JTBToolkit.makeNodeToken(n457); }
      { n0 = new NodeChoice(n456, 226); }
   |
      n459=<FAMILY_> { n458 = JTBToolkit.makeNodeToken(n459); }
      { n0 = new NodeChoice(n458, 227); }
   |
      n461=<HOST_> { n460 = JTBToolkit.makeNodeToken(n461); }
      { n0 = new NodeChoice(n460, 228); }
   |
      n463=<HOSTMASK_> { n462 = JTBToolkit.makeNodeToken(n463); }
      { n0 = new NodeChoice(n462, 229); }
   |
      n465=<MASKLEN_> { n464 = JTBToolkit.makeNodeToken(n465); }
      { n0 = new NodeChoice(n464, 230); }
   |
      n467=<NETMASK_> { n466 = JTBToolkit.makeNodeToken(n467); }
      { n0 = new NodeChoice(n466, 231); }
   |
      n469=<NETWORK_> { n468 = JTBToolkit.makeNodeToken(n469); }
      { n0 = new NodeChoice(n468, 232); }
   |
      n471=<SET_MASKLEN_> { n470 = JTBToolkit.makeNodeToken(n471); }
      { n0 = new NodeChoice(n470, 233); }
   )
   
   { return new UnreservedWords(n0); }
}

Identifier Identifier(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   UnreservedWords n5;

   {
   }
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QUOTED_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n5=UnreservedWords(prn)
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Identifier(n0); }
}

process process(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   VacuumDatabase n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   AnalyzeDatabase n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   createTable n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   CreateTablespace n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   createIndex n22;
   NodeOptional n23 = new NodeOptional();
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   dropTable n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   NodeSequence n31;
   DropTablespace n32;
   NodeOptional n33 = new NodeOptional();
   NodeToken n34;
   Token n35;
   NodeSequence n36;
   SelectWithParenthesis n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   InsertTable n42;
   NodeOptional n43 = new NodeOptional();
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   UpdateTable n47;
   NodeOptional n48 = new NodeOptional();
   NodeToken n49;
   Token n50;
   NodeSequence n51;
   Delete n52;
   NodeOptional n53 = new NodeOptional();
   NodeToken n54;
   Token n55;
   NodeSequence n56;
   Alter n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;
   NodeSequence n61;
   DropIndex n62;
   NodeOptional n63 = new NodeOptional();
   NodeToken n64;
   Token n65;
   NodeSequence n66;
   RenameTable n67;
   NodeOptional n68 = new NodeOptional();
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   UpdateStats n72;
   NodeOptional n73 = new NodeOptional();
   NodeToken n74;
   Token n75;
   NodeSequence n76;
   ShowAgents n77;
   NodeOptional n78 = new NodeOptional();
   NodeToken n79;
   Token n80;
   NodeSequence n81;
   ShowDatabases n82;
   NodeOptional n83 = new NodeOptional();
   NodeToken n84;
   Token n85;
   NodeSequence n86;
   ShowStatements n87;
   NodeOptional n88 = new NodeOptional();
   NodeToken n89;
   Token n90;
   NodeSequence n91;
   ShowTables n92;
   NodeOptional n93 = new NodeOptional();
   NodeToken n94;
   Token n95;
   NodeSequence n96;
   ShowTranIsolation n97;
   NodeOptional n98 = new NodeOptional();
   NodeToken n99;
   Token n100;
   NodeSequence n101;
   BeginTransaction n102;
   NodeOptional n103 = new NodeOptional();
   NodeToken n104;
   Token n105;
   NodeSequence n106;
   CommitTransaction n107;
   NodeOptional n108 = new NodeOptional();
   NodeToken n109;
   Token n110;
   NodeSequence n111;
   RollbackTransaction n112;
   NodeOptional n113 = new NodeOptional();
   NodeToken n114;
   Token n115;
   NodeSequence n116;
   DescribeTable n117;
   NodeOptional n118 = new NodeOptional();
   NodeToken n119;
   Token n120;
   NodeSequence n121;
   ShowConstraints n122;
   NodeOptional n123 = new NodeOptional();
   NodeToken n124;
   Token n125;
   NodeSequence n126;
   ShowIndexes n127;
   NodeOptional n128 = new NodeOptional();
   NodeToken n129;
   Token n130;
   NodeSequence n131;
   Deallocate n132;
   NodeOptional n133 = new NodeOptional();
   NodeToken n134;
   Token n135;
   NodeSequence n136;
   CreateUser n137;
   NodeOptional n138 = new NodeOptional();
   NodeToken n139;
   Token n140;
   NodeSequence n141;
   DropUser n142;
   NodeOptional n143 = new NodeOptional();
   NodeToken n144;
   Token n145;
   NodeSequence n146;
   AlterUser n147;
   NodeOptional n148 = new NodeOptional();
   NodeToken n149;
   Token n150;
   NodeSequence n151;
   Grant n152;
   NodeOptional n153 = new NodeOptional();
   NodeToken n154;
   Token n155;
   NodeSequence n156;
   Revoke n157;
   NodeOptional n158 = new NodeOptional();
   NodeToken n159;
   Token n160;
   NodeSequence n161;
   createView n162;
   NodeOptional n163 = new NodeOptional();
   NodeToken n164;
   Token n165;
   NodeSequence n166;
   DropView n167;
   NodeOptional n168 = new NodeOptional();
   NodeToken n169;
   Token n170;
   NodeSequence n171;
   ShowUsers n172;
   NodeOptional n173 = new NodeOptional();
   NodeToken n174;
   Token n175;
   NodeSequence n176;
   ShowViews n177;
   NodeOptional n178 = new NodeOptional();
   NodeToken n179;
   Token n180;
   NodeSequence n181;
   Cluster n182;
   NodeOptional n183 = new NodeOptional();
   NodeToken n184;
   Token n185;
   NodeSequence n186;
   Truncate n187;
   NodeOptional n188 = new NodeOptional();
   NodeToken n189;
   Token n190;
   NodeSequence n191;
   ExecDirect n192;
   NodeOptional n193 = new NodeOptional();
   NodeToken n194;
   Token n195;
   NodeSequence n196;
   Explain n197;
   NodeOptional n198 = new NodeOptional();
   NodeToken n199;
   Token n200;
   NodeSequence n201;
   SetProperty n202;
   NodeOptional n203 = new NodeOptional();
   NodeToken n204;
   Token n205;
   NodeSequence n206;
   ShowProperty n207;
   NodeOptional n208 = new NodeOptional();
   NodeToken n209;
   Token n210;
   NodeSequence n211;
   AddNodeToDB n212;
   NodeOptional n213 = new NodeOptional();
   NodeToken n214;
   Token n215;
   NodeSequence n216;
   DropNodeFromDB n217;
   NodeOptional n218 = new NodeOptional();
   NodeToken n219;
   Token n220;
   NodeSequence n221;
   StartDatabase n222;
   NodeOptional n223 = new NodeOptional();
   NodeToken n224;
   Token n225;
   NodeSequence n226;
   StopDatabase n227;
   NodeOptional n228 = new NodeOptional();
   NodeToken n229;
   Token n230;
   NodeSequence n231;
   ShutdownXDB n232;
   NodeOptional n233 = new NodeOptional();
   NodeToken n234;
   Token n235;
   NodeSequence n236;
   CreateDatabase n237;
   NodeOptional n238 = new NodeOptional();
   NodeToken n239;
   Token n240;
   NodeSequence n241;
   DropDatabase n242;
   NodeOptional n243 = new NodeOptional();
   NodeToken n244;
   Token n245;
   NodeSequence n246;
   CopyData n247;
   NodeOptional n248 = new NodeOptional();
   NodeToken n249;
   Token n250;
   NodeSequence n251;
   Kill n252;
   NodeOptional n253 = new NodeOptional();
   NodeToken n254;
   Token n255;
   NodeSequence n256;
   Unlisten n257;
   NodeOptional n258 = new NodeOptional();
   NodeToken n259;
   Token n260;
   NodeToken n261;
   Token n262;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=VacuumDatabase(prn)
         { n1.addNode(n2); }
         (
            n5=<SEMICOLON_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n6 = new NodeSequence(2); }
         n7=AnalyzeDatabase(prn)
         { n6.addNode(n7); }
         (
            n10=<SEMICOLON_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
         )?
         { n6.addNode(n8); }
         { n0 = new NodeChoice(n6, 1); }
      |
         LOOKAHEAD(3)
         { n11 = new NodeSequence(3); }
         n12=createTable(prn)
         { n11.addNode(n12); }
         (
            n15=<SEMICOLON_> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n11.addNode(n13); }
         { n0 = new NodeChoice(n11, 2); }
      |
         LOOKAHEAD(3)
         { n16 = new NodeSequence(3); }
         n17=CreateTablespace(prn)
         { n16.addNode(n17); }
         (
            n20=<SEMICOLON_> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18.addNode(n19); }
         )?
         { n16.addNode(n18); }
         { n0 = new NodeChoice(n16, 3); }
      |
         LOOKAHEAD(3)
         { n21 = new NodeSequence(3); }
         n22=createIndex(prn)
         { n21.addNode(n22); }
         (
            n25=<SEMICOLON_> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n23.addNode(n24); }
         )?
         { n21.addNode(n23); }
         { n0 = new NodeChoice(n21, 4); }
      |
         LOOKAHEAD(3)
         { n26 = new NodeSequence(3); }
         n27=dropTable(prn)
         { n26.addNode(n27); }
         (
            n30=<SEMICOLON_> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n26.addNode(n28); }
         { n0 = new NodeChoice(n26, 5); }
      |
         LOOKAHEAD(3)
         { n31 = new NodeSequence(3); }
         n32=DropTablespace(prn)
         { n31.addNode(n32); }
         (
            n35=<SEMICOLON_> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
         )?
         { n31.addNode(n33); }
         { n0 = new NodeChoice(n31, 6); }
      |
         LOOKAHEAD(4)
         { n36 = new NodeSequence(3); }
         n37=SelectWithParenthesis(prn)
         { n36.addNode(n37); }
         (
            n40=<SEMICOLON_> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
         )?
         { n36.addNode(n38); }
         { n0 = new NodeChoice(n36, 7); }
      |
         { n41 = new NodeSequence(2); }
         n42=InsertTable(prn)
         { n41.addNode(n42); }
         (
            n45=<SEMICOLON_> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n41.addNode(n43); }
         { n0 = new NodeChoice(n41, 8); }
      |
         LOOKAHEAD(<UPDATE_> TableName(prn) <SET_>)
         { n46 = new NodeSequence(3); }
         n47=UpdateTable(prn)
         { n46.addNode(n47); }
         (
            n50=<SEMICOLON_> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
         )?
         { n46.addNode(n48); }
         { n0 = new NodeChoice(n46, 9); }
      |
         { n51 = new NodeSequence(2); }
         n52=Delete(prn)
         { n51.addNode(n52); }
         (
            n55=<SEMICOLON_> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n51.addNode(n53); }
         { n0 = new NodeChoice(n51, 10); }
      |
         LOOKAHEAD(2)
         { n56 = new NodeSequence(3); }
         n57=Alter(prn)
         { n56.addNode(n57); }
         (
            n60=<SEMICOLON_> { n59 = JTBToolkit.makeNodeToken(n60); }
            { n58.addNode(n59); }
         )?
         { n56.addNode(n58); }
         { n0 = new NodeChoice(n56, 11); }
      |
         LOOKAHEAD(2)
         { n61 = new NodeSequence(3); }
         n62=DropIndex(prn)
         { n61.addNode(n62); }
         (
            n65=<SEMICOLON_> { n64 = JTBToolkit.makeNodeToken(n65); }
            { n63.addNode(n64); }
         )?
         { n61.addNode(n63); }
         { n0 = new NodeChoice(n61, 12); }
      |
         { n66 = new NodeSequence(2); }
         n67=RenameTable(prn)
         { n66.addNode(n67); }
         (
            n70=<SEMICOLON_> { n69 = JTBToolkit.makeNodeToken(n70); }
            { n68.addNode(n69); }
         )?
         { n66.addNode(n68); }
         { n0 = new NodeChoice(n66, 13); }
      |
         { n71 = new NodeSequence(2); }
         n72=UpdateStats(prn)
         { n71.addNode(n72); }
         (
            n75=<SEMICOLON_> { n74 = JTBToolkit.makeNodeToken(n75); }
            { n73.addNode(n74); }
         )?
         { n71.addNode(n73); }
         { n0 = new NodeChoice(n71, 14); }
      |
         LOOKAHEAD(2)
         { n76 = new NodeSequence(3); }
         n77=ShowAgents()
         { n76.addNode(n77); }
         (
            n80=<SEMICOLON_> { n79 = JTBToolkit.makeNodeToken(n80); }
            { n78.addNode(n79); }
         )?
         { n76.addNode(n78); }
         { n0 = new NodeChoice(n76, 15); }
      |
         LOOKAHEAD(2)
         { n81 = new NodeSequence(3); }
         n82=ShowDatabases()
         { n81.addNode(n82); }
         (
            n85=<SEMICOLON_> { n84 = JTBToolkit.makeNodeToken(n85); }
            { n83.addNode(n84); }
         )?
         { n81.addNode(n83); }
         { n0 = new NodeChoice(n81, 16); }
      |
         LOOKAHEAD(2)
         { n86 = new NodeSequence(3); }
         n87=ShowStatements()
         { n86.addNode(n87); }
         (
            n90=<SEMICOLON_> { n89 = JTBToolkit.makeNodeToken(n90); }
            { n88.addNode(n89); }
         )?
         { n86.addNode(n88); }
         { n0 = new NodeChoice(n86, 17); }
      |
         LOOKAHEAD(2)
         { n91 = new NodeSequence(3); }
         n92=ShowTables()
         { n91.addNode(n92); }
         (
            n95=<SEMICOLON_> { n94 = JTBToolkit.makeNodeToken(n95); }
            { n93.addNode(n94); }
         )?
         { n91.addNode(n93); }
         { n0 = new NodeChoice(n91, 18); }
      |
         LOOKAHEAD(2)
         { n96 = new NodeSequence(3); }
         n97=ShowTranIsolation()
         { n96.addNode(n97); }
         (
            n100=<SEMICOLON_> { n99 = JTBToolkit.makeNodeToken(n100); }
            { n98.addNode(n99); }
         )?
         { n96.addNode(n98); }
         { n0 = new NodeChoice(n96, 19); }
      |
         { n101 = new NodeSequence(2); }
         n102=BeginTransaction()
         { n101.addNode(n102); }
         (
            n105=<SEMICOLON_> { n104 = JTBToolkit.makeNodeToken(n105); }
            { n103.addNode(n104); }
         )?
         { n101.addNode(n103); }
         { n0 = new NodeChoice(n101, 20); }
      |
         { n106 = new NodeSequence(2); }
         n107=CommitTransaction()
         { n106.addNode(n107); }
         (
            n110=<SEMICOLON_> { n109 = JTBToolkit.makeNodeToken(n110); }
            { n108.addNode(n109); }
         )?
         { n106.addNode(n108); }
         { n0 = new NodeChoice(n106, 21); }
      |
         { n111 = new NodeSequence(2); }
         n112=RollbackTransaction()
         { n111.addNode(n112); }
         (
            n115=<SEMICOLON_> { n114 = JTBToolkit.makeNodeToken(n115); }
            { n113.addNode(n114); }
         )?
         { n111.addNode(n113); }
         { n0 = new NodeChoice(n111, 22); }
      |
         { n116 = new NodeSequence(2); }
         n117=DescribeTable(prn)
         { n116.addNode(n117); }
         (
            n120=<SEMICOLON_> { n119 = JTBToolkit.makeNodeToken(n120); }
            { n118.addNode(n119); }
         )?
         { n116.addNode(n118); }
         { n0 = new NodeChoice(n116, 23); }
      |
         LOOKAHEAD(2)
         { n121 = new NodeSequence(3); }
         n122=ShowConstraints(prn)
         { n121.addNode(n122); }
         (
            n125=<SEMICOLON_> { n124 = JTBToolkit.makeNodeToken(n125); }
            { n123.addNode(n124); }
         )?
         { n121.addNode(n123); }
         { n0 = new NodeChoice(n121, 24); }
      |
         LOOKAHEAD(2)
         { n126 = new NodeSequence(3); }
         n127=ShowIndexes(prn)
         { n126.addNode(n127); }
         (
            n130=<SEMICOLON_> { n129 = JTBToolkit.makeNodeToken(n130); }
            { n128.addNode(n129); }
         )?
         { n126.addNode(n128); }
         { n0 = new NodeChoice(n126, 25); }
      |
         LOOKAHEAD(3)
         { n131 = new NodeSequence(3); }
         n132=Deallocate(prn)
         { n131.addNode(n132); }
         (
            n135=<SEMICOLON_> { n134 = JTBToolkit.makeNodeToken(n135); }
            { n133.addNode(n134); }
         )?
         { n131.addNode(n133); }
         { n0 = new NodeChoice(n131, 26); }
      |
         LOOKAHEAD(3)
         { n136 = new NodeSequence(3); }
         n137=CreateUser(prn)
         { n136.addNode(n137); }
         (
            n140=<SEMICOLON_> { n139 = JTBToolkit.makeNodeToken(n140); }
            { n138.addNode(n139); }
         )?
         { n136.addNode(n138); }
         { n0 = new NodeChoice(n136, 27); }
      |
         LOOKAHEAD(3)
         { n141 = new NodeSequence(3); }
         n142=DropUser(prn)
         { n141.addNode(n142); }
         (
            n145=<SEMICOLON_> { n144 = JTBToolkit.makeNodeToken(n145); }
            { n143.addNode(n144); }
         )?
         { n141.addNode(n143); }
         { n0 = new NodeChoice(n141, 28); }
      |
         LOOKAHEAD(3)
         { n146 = new NodeSequence(3); }
         n147=AlterUser(prn)
         { n146.addNode(n147); }
         (
            n150=<SEMICOLON_> { n149 = JTBToolkit.makeNodeToken(n150); }
            { n148.addNode(n149); }
         )?
         { n146.addNode(n148); }
         { n0 = new NodeChoice(n146, 29); }
      |
         { n151 = new NodeSequence(2); }
         n152=Grant(prn)
         { n151.addNode(n152); }
         (
            n155=<SEMICOLON_> { n154 = JTBToolkit.makeNodeToken(n155); }
            { n153.addNode(n154); }
         )?
         { n151.addNode(n153); }
         { n0 = new NodeChoice(n151, 30); }
      |
         { n156 = new NodeSequence(2); }
         n157=Revoke(prn)
         { n156.addNode(n157); }
         (
            n160=<SEMICOLON_> { n159 = JTBToolkit.makeNodeToken(n160); }
            { n158.addNode(n159); }
         )?
         { n156.addNode(n158); }
         { n0 = new NodeChoice(n156, 31); }
      |
         { n161 = new NodeSequence(2); }
         n162=createView(prn)
         { n161.addNode(n162); }
         (
            n165=<SEMICOLON_> { n164 = JTBToolkit.makeNodeToken(n165); }
            { n163.addNode(n164); }
         )?
         { n161.addNode(n163); }
         { n0 = new NodeChoice(n161, 32); }
      |
         { n166 = new NodeSequence(2); }
         n167=DropView(prn)
         { n166.addNode(n167); }
         (
            n170=<SEMICOLON_> { n169 = JTBToolkit.makeNodeToken(n170); }
            { n168.addNode(n169); }
         )?
         { n166.addNode(n168); }
         { n0 = new NodeChoice(n166, 33); }
      |
         LOOKAHEAD(2)
         { n171 = new NodeSequence(3); }
         n172=ShowUsers(prn)
         { n171.addNode(n172); }
         (
            n175=<SEMICOLON_> { n174 = JTBToolkit.makeNodeToken(n175); }
            { n173.addNode(n174); }
         )?
         { n171.addNode(n173); }
         { n0 = new NodeChoice(n171, 34); }
      |
         LOOKAHEAD(2)
         { n176 = new NodeSequence(3); }
         n177=ShowViews(prn)
         { n176.addNode(n177); }
         (
            n180=<SEMICOLON_> { n179 = JTBToolkit.makeNodeToken(n180); }
            { n178.addNode(n179); }
         )?
         { n176.addNode(n178); }
         { n0 = new NodeChoice(n176, 35); }
      |
         { n181 = new NodeSequence(2); }
         n182=Cluster(prn)
         { n181.addNode(n182); }
         (
            n185=<SEMICOLON_> { n184 = JTBToolkit.makeNodeToken(n185); }
            { n183.addNode(n184); }
         )?
         { n181.addNode(n183); }
         { n0 = new NodeChoice(n181, 36); }
      |
         { n186 = new NodeSequence(2); }
         n187=Truncate(prn)
         { n186.addNode(n187); }
         (
            n190=<SEMICOLON_> { n189 = JTBToolkit.makeNodeToken(n190); }
            { n188.addNode(n189); }
         )?
         { n186.addNode(n188); }
         { n0 = new NodeChoice(n186, 37); }
      |
         { n191 = new NodeSequence(2); }
         n192=ExecDirect(prn)
         { n191.addNode(n192); }
         (
            n195=<SEMICOLON_> { n194 = JTBToolkit.makeNodeToken(n195); }
            { n193.addNode(n194); }
         )?
         { n191.addNode(n193); }
         { n0 = new NodeChoice(n191, 38); }
      |
         { n196 = new NodeSequence(2); }
         n197=Explain(prn)
         { n196.addNode(n197); }
         (
            n200=<SEMICOLON_> { n199 = JTBToolkit.makeNodeToken(n200); }
            { n198.addNode(n199); }
         )?
         { n196.addNode(n198); }
         { n0 = new NodeChoice(n196, 39); }
      |
         LOOKAHEAD(2)
         { n201 = new NodeSequence(3); }
         n202=SetProperty(prn)
         { n201.addNode(n202); }
         (
            n205=<SEMICOLON_> { n204 = JTBToolkit.makeNodeToken(n205); }
            { n203.addNode(n204); }
         )?
         { n201.addNode(n203); }
         { n0 = new NodeChoice(n201, 40); }
      |
         LOOKAHEAD(2)
         { n206 = new NodeSequence(3); }
         n207=ShowProperty(prn)
         { n206.addNode(n207); }
         (
            n210=<SEMICOLON_> { n209 = JTBToolkit.makeNodeToken(n210); }
            { n208.addNode(n209); }
         )?
         { n206.addNode(n208); }
         { n0 = new NodeChoice(n206, 41); }
      |
         { n211 = new NodeSequence(2); }
         n212=AddNodeToDB(prn)
         { n211.addNode(n212); }
         (
            n215=<SEMICOLON_> { n214 = JTBToolkit.makeNodeToken(n215); }
            { n213.addNode(n214); }
         )?
         { n211.addNode(n213); }
         { n0 = new NodeChoice(n211, 42); }
      |
         { n216 = new NodeSequence(2); }
         n217=DropNodeFromDB(prn)
         { n216.addNode(n217); }
         (
            n220=<SEMICOLON_> { n219 = JTBToolkit.makeNodeToken(n220); }
            { n218.addNode(n219); }
         )?
         { n216.addNode(n218); }
         { n0 = new NodeChoice(n216, 43); }
      |
         { n221 = new NodeSequence(2); }
         n222=StartDatabase(prn)
         { n221.addNode(n222); }
         (
            n225=<SEMICOLON_> { n224 = JTBToolkit.makeNodeToken(n225); }
            { n223.addNode(n224); }
         )?
         { n221.addNode(n223); }
         { n0 = new NodeChoice(n221, 44); }
      |
         { n226 = new NodeSequence(2); }
         n227=StopDatabase(prn)
         { n226.addNode(n227); }
         (
            n230=<SEMICOLON_> { n229 = JTBToolkit.makeNodeToken(n230); }
            { n228.addNode(n229); }
         )?
         { n226.addNode(n228); }
         { n0 = new NodeChoice(n226, 45); }
      |
         { n231 = new NodeSequence(2); }
         n232=ShutdownXDB(prn)
         { n231.addNode(n232); }
         (
            n235=<SEMICOLON_> { n234 = JTBToolkit.makeNodeToken(n235); }
            { n233.addNode(n234); }
         )?
         { n231.addNode(n233); }
         { n0 = new NodeChoice(n231, 46); }
      |
         { n236 = new NodeSequence(2); }
         n237=CreateDatabase(prn)
         { n236.addNode(n237); }
         (
            n240=<SEMICOLON_> { n239 = JTBToolkit.makeNodeToken(n240); }
            { n238.addNode(n239); }
         )?
         { n236.addNode(n238); }
         { n0 = new NodeChoice(n236, 47); }
      |
         { n241 = new NodeSequence(2); }
         n242=DropDatabase(prn)
         { n241.addNode(n242); }
         (
            n245=<SEMICOLON_> { n244 = JTBToolkit.makeNodeToken(n245); }
            { n243.addNode(n244); }
         )?
         { n241.addNode(n243); }
         { n0 = new NodeChoice(n241, 48); }
      |
         { n246 = new NodeSequence(2); }
         n247=CopyData(prn)
         { n246.addNode(n247); }
         (
            n250=<SEMICOLON_> { n249 = JTBToolkit.makeNodeToken(n250); }
            { n248.addNode(n249); }
         )?
         { n246.addNode(n248); }
         { n0 = new NodeChoice(n246, 49); }
      |
         { n251 = new NodeSequence(2); }
         n252=Kill(prn)
         { n251.addNode(n252); }
         (
            n255=<SEMICOLON_> { n254 = JTBToolkit.makeNodeToken(n255); }
            { n253.addNode(n254); }
         )?
         { n251.addNode(n253); }
         { n0 = new NodeChoice(n251, 50); }
      |
         { n256 = new NodeSequence(2); }
         n257=Unlisten(prn)
         { n256.addNode(n257); }
         (
            n260=<SEMICOLON_> { n259 = JTBToolkit.makeNodeToken(n260); }
            { n258.addNode(n259); }
         )?
         { n256.addNode(n258); }
         { n0 = new NodeChoice(n256, 51); }
      )
      
   )
   n262=<EOF> { 
      n262.beginColumn++; n262.endColumn++;
      n261 = JTBToolkit.makeNodeToken(n262);
   }
   
   { return new process(n0,n261); }
}

CopyData CopyData(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   ColumnNameListWithParenthesis n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Select n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeChoice n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeOptional n32;
   NodeToken n33;
   Token n34;
   NodeList n35;
   NodeChoice n36;
   FormatDefOIDS n37;
   FormatDefDelimiter n38;
   FormatDefNull n39;
   FormatDefCSV n40;

   {
   }
}
{
   n1=<COPY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n4=TableName(prn)
         { n3.addNode(n4); }
         (
            n6=ColumnNameListWithParenthesis(prn)
            { n5.addNode(n6); }
         )?
         { n3.addNode(n5); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=Select(prn)
         { n7.addNode(n10); }
         n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n7.addNode(n11); }
         { n2 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      (
         { n14 = new NodeSequence(2); }
         n16=<FROM_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         (
            (
               n19=<STDIN_> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n17 = new NodeChoice(n18, 0); }
            |
               n21=<STRING_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n17 = new NodeChoice(n20, 1); }
            )
            
         )
         { n14.addNode(n17); }
         { n13 = new NodeChoice(n14, 0); }
      |
         { n22 = new NodeSequence(2); }
         n24=<TO_> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            (
               n27=<STDOUT_> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n25 = new NodeChoice(n26, 0); }
            |
               n29=<STRING_LITERAL> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n25 = new NodeChoice(n28, 1); }
            )
            
         )
         { n22.addNode(n25); }
         { n13 = new NodeChoice(n22, 1); }
      )
      
   )
   (
      { n32 = new NodeOptional(); }
      { n35 = new NodeList(); }
      { n31 = new NodeSequence(2); }
      (
         n34=<WITH_> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
      )?
      { n31.addNode(n32); }
      (
         (
            n37=FormatDefOIDS(prn)
            { n36 = new NodeChoice(n37, 0); }
         |
            n38=FormatDefDelimiter(prn)
            { n36 = new NodeChoice(n38, 1); }
         |
            n39=FormatDefNull(prn)
            { n36 = new NodeChoice(n39, 2); }
         |
            n40=FormatDefCSV(prn)
            { n36 = new NodeChoice(n40, 3); }
         )
         { n35.addNode(n36); }
      )+
      { n35.nodes.trimToSize(); }
      { n31.addNode(n35); }
      { n30.addNode(n31); }
   )?
   
   { return new CopyData(n0,n2,n13,n30); }
}

FormatDefOIDS FormatDefOIDS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<OIDS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FormatDefOIDS(n0); }
}

FormatDefDelimiter FormatDefDelimiter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DELIMITER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<AS_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FormatDefDelimiter(n0,n2,n5); }
}

FormatDefNull FormatDefNull(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NULL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<AS_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FormatDefNull(n0,n2,n5); }
}

FormatDefCSV FormatDefCSV(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   ColumnNameList n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   ColumnNameList n27;

   {
   }
}
{
   n1=<CSV_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n15 = new NodeOptional(); }
      (
         { n4 = new NodeSequence(3); }
         n6=<QUOTE_STRING_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            n9=<AS_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n4.addNode(n7); }
         n11=<STRING_LITERAL> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n4.addNode(n10); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n12 = new NodeSequence(3); }
         n14=<ESCAPE_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         (
            n17=<AS_> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n12.addNode(n15); }
         n19=<STRING_LITERAL> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n12.addNode(n18); }
         { n3 = new NodeChoice(n12, 1); }
      |
         { n20 = new NodeSequence(2); }
         n22=<FORCE_QUOTE_> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n23=ColumnNameList(prn)
         { n20.addNode(n23); }
         { n3 = new NodeChoice(n20, 2); }
      |
         { n24 = new NodeSequence(2); }
         n26=<FORCE_NOT_NULL_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         n27=ColumnNameList(prn)
         { n24.addNode(n27); }
         { n3 = new NodeChoice(n24, 3); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new FormatDefCSV(n0,n2); }
}

AddNodeToDB AddNodeToDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<ADD_NODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n12=<MANUAL_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   
   { return new AddNodeToDB(n0,n2,n4,n10); }
}

DropNodeFromDB DropNodeFromDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<DROP_NODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n12=<FORCE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   
   { return new DropNodeFromDB(n0,n2,n4,n10); }
}

StartDatabase StartDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   {
   }
}
{
   n1=<START_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n9 = new NodeSequence(2); }
      n11=<WAIT_TIMEOUT_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<INT_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new StartDatabase(n0,n2,n3,n8); }
}

StopDatabase StopDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
}
{
   n1=<STOP_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new StopDatabase(n0,n2,n3); }
}

ShutdownXDB ShutdownXDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<SHUT_DOWN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<FORCE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   
   { return new ShutdownXDB(n0,n2); }
}

CreateDatabase CreateDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeListOptional n26 = new NodeListOptional();
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;

   {
   }
}
{
   n1=<CREATE_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n5 = new NodeOptional(); }
      { n10 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<WITH_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      n9=<OWNER_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      (
         n12="=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n4.addNode(n10); }
      n13=Identifier(prn)
      { n4.addNode(n13); }
      { n3.addNode(n4); }
   )?
   (
      n16=<MANUAL_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
   )?
   n18=<ON_> { n17 = JTBToolkit.makeNodeToken(n18); }
   (
      (
         n21=<NODE_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19 = new NodeChoice(n20, 0); }
      |
         n23=<NODES_> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n19 = new NodeChoice(n22, 1); }
      )
      
   )
   n25=<INT_LITERAL> { n24 = JTBToolkit.makeNodeToken(n25); }
   (
      { n27 = new NodeSequence(2); }
      n29="," { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
      n31=<INT_LITERAL> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n27.addNode(n30); }
      { n26.addNode(n27); }
   )*
   { n26.nodes.trimToSize(); }
   
   { return new CreateDatabase(n0,n2,n3,n14,n17,n19,n24,n26); }
}

DropDatabase DropDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<DROP_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      n5=<FORCE_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new DropDatabase(n0,n2,n3); }
}

ExecDirect ExecDirect(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17 = new NodeListOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   {
   }
}
{
   n1=<EXEC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIRECT_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<ON_> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      (
         n8=<ALL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         { n9 = new NodeSequence(3); }
         (
            (
               n12=<NODE_> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<NODES_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            )
            
         )
         { n9.addNode(n10); }
         n16=<INT_LITERAL> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n9.addNode(n15); }
         (
            { n18 = new NodeSequence(2); }
            n20="," { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18.addNode(n19); }
            n22=<INT_LITERAL> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n18.addNode(n21); }
            { n17.addNode(n18); }
         )*
         { n17.nodes.trimToSize(); }
         { n9.addNode(n17); }
         { n6 = new NodeChoice(n9, 1); }
      )
      
   )
   n24=<STRING_LITERAL> { n23 = JTBToolkit.makeNodeToken(n24); }
   
   { return new ExecDirect(n0,n2,n4,n6,n23); }
}

Explain Explain(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Select n5;

   {
   }
}
{
   n1=<EXPLAIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<VERBOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Select(prn)
   
   { return new Explain(n0,n2,n5); }
}

VacuumDatabase VacuumDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   TableName n10;
   AnalyzeDatabase n11;

   {
   }
}
{
   n1=<VACUUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<FULL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<FREEZE_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      (
         n10=TableName(prn)
         { n9 = new NodeChoice(n10, 0); }
      |
         n11=AnalyzeDatabase(prn)
         { n9 = new NodeChoice(n11, 1); }
      )
      { n8.addNode(n9); }
   )?
   
   { return new VacuumDatabase(n0,n2,n8); }
}

AnalyzeDatabase AnalyzeDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   TableName n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ColumnNameList n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ANALYZE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=TableName(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(3); }
         n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=ColumnNameList(prn)
         { n6.addNode(n9); }
         n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   
   { return new AnalyzeDatabase(n0,n2); }
}

CreateTablespace CreateTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   TablespaceLocation n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   TablespaceLocation n10;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   n5=TablespaceLocation(prn)
   (
      { n7 = new NodeSequence(2); }
      n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=TablespaceLocation(prn)
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new CreateTablespace(n0,n2,n4,n5,n6); }
}

DropTablespace DropTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new DropTablespace(n0,n2,n4); }
}

TablespaceLocation TablespaceLocation(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   stringLiteral n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16 = new NodeListOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   {
   }
}
{
   n1=<LOCATION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=stringLiteral(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n8 = new NodeSequence(3); }
         (
            (
               n11=<NODE_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               n13=<NODES_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n9 = new NodeChoice(n12, 1); }
            )
            
         )
         { n8.addNode(n9); }
         n15=<INT_LITERAL> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n8.addNode(n14); }
         (
            LOOKAHEAD(2)
            { n17 = new NodeSequence(2); }
            n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            n21=<INT_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17.addNode(n20); }
            { n16.addNode(n17); }
         )*
         { n16.nodes.trimToSize(); }
         { n8.addNode(n16); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new TablespaceLocation(n0,n2,n3,n5); }
}

UpdateStats UpdateStats(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   TableName n22;
   TableName n23;
   NodeToken n24;
   Token n25;

   {
   }
}
{
   n1=<UPDATE_STAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         n5=<COLUMN_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            (
               LOOKAHEAD(2)
               { n7 = new NodeSequence(4); }
               n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n7.addNode(n8); }
               n11=<STAR_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n7.addNode(n10); }
               n13=<PARENTHESIS_CLOSE_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n7.addNode(n12); }
               { n6 = new NodeChoice(n7, 0); }
            |
               { n14 = new NodeSequence(3); }
               n16=<PARENTHESIS_START_> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
               n17=ColumnNameList(prn)
               { n14.addNode(n17); }
               n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n14.addNode(n18); }
               { n6 = new NodeChoice(n14, 1); }
            )
            
         )
         { n3.addNode(n6); }
         n21=<FOR_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n3.addNode(n20); }
         n22=TableName(prn)
         { n3.addNode(n22); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n23=TableName(prn)
         { n2 = new NodeChoice(n23, 1); }
      |
         n25=<STAR_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n2 = new NodeChoice(n24, 2); }
      )
      
   )
   
   { return new UpdateStats(n0,n2); }
}

RenameTable RenameTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
}
{
   n1=<RENAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   n6=<TO_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=TableName(prn)
   
   { return new RenameTable(n0,n2,n4,n5,n7); }
}

DropIndex DropIndex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INDEX_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<ON_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
   { return new DropIndex(n0,n2,n4,n5); }
}

Alter Alter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   AlterTable n3;
   AlterTableSpace n4;

   {
   }
}
{
   n1=<ALTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=AlterTable(prn)
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=AlterTableSpace(prn)
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new Alter(n0,n2); }
}

AlterTableSpace AlterTableSpace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
}
{
   n1=<TABLESPACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   n4=<RENAME_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<TO_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   
   { return new AlterTableSpace(n0,n2,n3,n5,n7); }
}

AlterTable AlterTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableName n2;
   AlterTableActon n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   AlterTableActon n8;

   {
   }
}
{
   n1=<TABLE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableName(prn)
   n3=AlterTableActon(prn)
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=AlterTableActon(prn)
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new AlterTable(n0,n2,n3,n4); }
}

AlterTableActon AlterTableActon(PrintStream prn) :
{
   NodeChoice n0;
   AddDef n1;
   DropDef n2;
   AlterDef n3;
   RenameDef n4;
   OwnerDef n5;
   SetTablespace n6;
   Inherit n7;

   {
   }
}
{
   (
      n1=AddDef(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DropDef(prn)
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=AlterDef(prn)
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RenameDef(prn)
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OwnerDef(prn)
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=SetTablespace(prn)
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Inherit(prn)
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new AlterTableActon(n0); }
}

Inherit Inherit(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
}
{
   (
      n2=<NO_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<INHERIT_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=TableName(prn)
   
   { return new Inherit(n0,n3,n5); }
}

SetTablespace SetTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new SetTablespace(n0,n2,n4); }
}

SetProperty SetProperty(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   IsolationLevel n26;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         n4=Identifier(prn)
         { n3.addNode(n4); }
         (
            (
               n8=<TO_> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6 = new NodeChoice(n7, 0); }
            |
               n10="=" { n9 = JTBToolkit.makeNodeToken(n10); }
               { n6 = new NodeChoice(n9, 1); }
            )
            { n5.addNode(n6); }
         )?
         { n3.addNode(n5); }
         (
            (
               n13=<STRING_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n14=Identifier(prn)
               { n11 = new NodeChoice(n14, 1); }
            |
               n16=<ON_> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n11 = new NodeChoice(n15, 2); }
            |
               n18=<TRUE_> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n11 = new NodeChoice(n17, 3); }
            |
               n20=<FALSE_> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n11 = new NodeChoice(n19, 4); }
            )
            
         )
         { n3.addNode(n11); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n21 = new NodeSequence(3); }
         n23=<TRANSACTION_> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n25=<ISOLATION_LEVEL_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21.addNode(n24); }
         n26=IsolationLevel(prn)
         { n21.addNode(n26); }
         { n2 = new NodeChoice(n21, 1); }
      )
      
   )
   
   { return new SetProperty(n0,n2); }
}

IsolationLevel IsolationLevel(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<SERIALIZABLE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REPEATABLE_READ_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<READ_COMMITTED_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<READ_UNCOMMITTED_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   
   { return new IsolationLevel(n0); }
}

ShowProperty ShowProperty(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<SHOW_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<ALL_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<QUOTED_IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new ShowProperty(n0,n2); }
}

OwnerDef OwnerDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<OWNER_TO_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<PUBLIC_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Identifier(prn)
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new OwnerDef(n0,n2); }
}

Constraint Constraint(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
}
{
   n1=<CONSTRAINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   
   { return new Constraint(n0,n2); }
}

AddDef AddDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   ColumnDeclare n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   Constraint n18;
   NodeChoice n19;
   PrimaryKeyDef n20;
   ForeignKeyDef n21;
   CheckDef n22;

   {
   }
}
{
   n1=<ADD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         (
            n6=<COLUMN_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n7=ColumnDeclare(prn)
         { n3.addNode(n7); }
         (
            (
               n11=<FIRST_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               { n12 = new NodeSequence(2); }
               n14=<AFTER_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n15=Identifier(prn)
               { n12.addNode(n15); }
               { n9 = new NodeChoice(n12, 1); }
            )
            { n8.addNode(n9); }
         )?
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n16 = new NodeSequence(2); }
         (
            n18=Constraint(prn)
            { n17.addNode(n18); }
         )?
         { n16.addNode(n17); }
         (
            (
               n20=PrimaryKeyDef(prn)
               { n19 = new NodeChoice(n20, 0); }
            |
               n21=ForeignKeyDef(prn)
               { n19 = new NodeChoice(n21, 1); }
            |
               n22=CheckDef(prn)
               { n19 = new NodeChoice(n22, 2); }
            )
            
         )
         { n16.addNode(n19); }
         { n2 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new AddDef(n0,n2); }
}

DropDef DropDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   Identifier n7;
   Constraint n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         (
            n6=<COLUMN_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n7=Identifier(prn)
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n8=Constraint(prn)
         { n2 = new NodeChoice(n8, 1); }
      |
         n10=<PRIMARYKEY_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 2); }
      )
      
   )
   
   { return new DropDef(n0,n2); }
}

RenameDef RenameDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   Identifier n8;

   {
   }
}
{
   n1=<RENAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<COLUMN_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   n7=<TO_> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier(prn)
   
   { return new RenameDef(n0,n2,n5,n6,n8); }
}

AlterDef AlterDef(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   AlterDefOperation n8;

   {
   }
}
{
   (
      (
         n2=<MODIFY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ALTER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<COLUMN_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=AlterDefOperation(prn)
   
   { return new AlterDef(n0,n5,n8); }
}

AlterDefOperation AlterDefOperation(PrintStream prn) :
{
   Identifier n0;
   NodeChoice n1;
   AlterDefOperationType n2;
   AlterDefOperationSet n3;
   DropDefaultNotNull n4;

   {
   }
}
{
   n0=Identifier(prn)
   (
      (
         n2=AlterDefOperationType(prn)
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=AlterDefOperationSet(prn)
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=DropDefaultNotNull(prn)
         { n1 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new AlterDefOperation(n0,n1); }
}

AlterDefOperationType AlterDefOperationType(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   types n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   IntervalLiterals n22;

   {
   }
}
{
   n1=<TYPE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=types()
   (
      { n4 = new NodeSequence(2); }
      n6=<USING_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         (
            n9=<STRING_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7 = new NodeChoice(n8, 0); }
         |
            n11=<NULL_> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n7 = new NodeChoice(n10, 1); }
         |
            n13=<DATE_> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n7 = new NodeChoice(n12, 2); }
         |
            n15=<TIME_> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n7 = new NodeChoice(n14, 3); }
         |
            n17=<TIMESTAMP_> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n7 = new NodeChoice(n16, 4); }
         |
            n19=<INT_LITERAL> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n7 = new NodeChoice(n18, 5); }
         |
            n21=<DECIMAL_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n7 = new NodeChoice(n20, 6); }
         |
            LOOKAHEAD(2)
            n22=IntervalLiterals(prn)
            { n7 = new NodeChoice(n22, 7); }
         )
         
      )
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new AlterDefOperationType(n0,n2,n3); }
}

AlterDefOperationSet AlterDefOperationSet(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   DefaultSpec n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=DefaultSpec(prn)
         { n2 = new NodeChoice(n3, 0); }
      |
         { n4 = new NodeSequence(2); }
         n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<NULL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         { n2 = new NodeChoice(n4, 1); }
      |
         { n9 = new NodeSequence(2); }
         n11=<STATISTICS_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13=<INT_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 2); }
      |
         n15=<STORAGE_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n2 = new NodeChoice(n14, 3); }
      )
      
   )
   
   { return new AlterDefOperationSet(n0,n2); }
}

DropDefaultNotNull DropDefaultNotNull(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<DEFAULT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7=<NOT_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n9=<NULL_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5.addNode(n8); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new DropDefaultNotNull(n0,n2); }
}

Delete Delete(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   WhereClause n6;

   {
   }
}
{
   n1=<DELETE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FROM_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      n6=WhereClause(prn)
      { n5.addNode(n6); }
   )?
   
   { return new Delete(n0,n2,n4,n5); }
}

UpdateTable UpdateTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   SetUpdateClause n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   SetUpdateClause n10;
   NodeOptional n11 = new NodeOptional();
   WhereClause n12;

   {
   }
}
{
   n1=<UPDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableName(prn)
   n4=<SET_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SetUpdateClause(prn)
   (
      { n7 = new NodeSequence(2); }
      n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=SetUpdateClause(prn)
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   (
      n12=WhereClause(prn)
      { n11.addNode(n12); }
   )?
   
   { return new UpdateTable(n0,n2,n3,n5,n6,n11); }
}

SetUpdateClause SetUpdateClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(2); }
      n2=TableName(prn)
      { n1.addNode(n2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   n5=Identifier(prn)
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SQLSimpleExpression(prn)
   
   { return new SetUpdateClause(n0,n5,n6,n8); }
}

createIndex createIndex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   TableName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   columnListIndexSpec n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   tablespaceDef n22;
   NodeOptional n23 = new NodeOptional();
   WhereClause n24;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<UNIQUE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<INDEX_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   n9=<ON_> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=TableName(prn)
   (
      { n12 = new NodeSequence(2); }
      n14=<USING_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Identifier(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_START_> { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=columnListIndexSpec(prn)
   n20=<PARENTHESIS_CLOSE_> { n19 = JTBToolkit.makeNodeToken(n20); }
   (
      n22=tablespaceDef(prn)
      { n21.addNode(n22); }
   )?
   (
      n24=WhereClause(prn)
      { n23.addNode(n24); }
   )?
   
   { return new createIndex(n0,n2,n5,n7,n8,n10,n11,n16,n18,n19,n21,n23); }
}

columnListIndexSpec columnListIndexSpec(PrintStream prn) :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeListOptional n15 = new NodeListOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Identifier n33;

   {
   }
}
{
   (
      (
         n1=Identifier(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(3); }
         n4=<PARENTHESIS_START_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=SQLSimpleExpression(prn)
         { n2.addNode(n5); }
         n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n2.addNode(n6); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      (
         n11=<ASC_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9 = new NodeChoice(n10, 0); }
      |
         n13=<DESC_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9 = new NodeChoice(n12, 1); }
      |
         n14=Identifier(prn)
         { n9 = new NodeChoice(n14, 2); }
      )
      { n8.addNode(n9); }
   )?
   (
      { n27 = new NodeOptional(); }
      { n16 = new NodeSequence(3); }
      n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         (
            n20=Identifier(prn)
            { n19 = new NodeChoice(n20, 0); }
         |
            { n21 = new NodeSequence(3); }
            n23=<PARENTHESIS_START_> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
            n24=SQLSimpleExpression(prn)
            { n21.addNode(n24); }
            n26=<PARENTHESIS_CLOSE_> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n21.addNode(n25); }
            { n19 = new NodeChoice(n21, 1); }
         )
         
      )
      { n16.addNode(n19); }
      (
         (
            n30=<ASC_> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28 = new NodeChoice(n29, 0); }
         |
            n32=<DESC_> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n28 = new NodeChoice(n31, 1); }
         |
            n33=Identifier(prn)
            { n28 = new NodeChoice(n33, 2); }
         )
         { n27.addNode(n28); }
      )?
      { n16.addNode(n27); }
      { n15.addNode(n16); }
   )*
   { n15.nodes.trimToSize(); }
   
   { return new columnListIndexSpec(n0,n8,n15); }
}

createTable createTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   TableName n17;
   NodeChoice n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   CreateDefinition n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   CreateDefinition n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   PartitionDeclare n31;
   NodeOptional n32 = new NodeOptional();
   inheritsDef n33;
   NodeOptional n34 = new NodeOptional();
   WithXRowID n35;
   NodeOptional n36 = new NodeOptional();
   OnCommitClause n37;
   NodeOptional n38 = new NodeOptional();
   tablespaceDef n39;
   NodeSequence n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   ColumnNameList n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   PartitionDeclare n49;
   NodeOptional n50 = new NodeOptional();
   WithXRowID n51;
   NodeOptional n52 = new NodeOptional();
   OnCommitClause n53;
   NodeOptional n54 = new NodeOptional();
   tablespaceDef n55;
   NodeToken n56;
   Token n57;
   SelectWithoutOrderAndSet n58;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         (
            n7=<LOCAL_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<GLOBAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      (
         (
            n12=<TEMP_> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10 = new NodeChoice(n11, 0); }
         |
            n14=<TEMPORARY_> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n10 = new NodeChoice(n13, 1); }
         )
         
      )
      { n3.addNode(n10); }
      { n2.addNode(n3); }
   )?
   n16=<TABLE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=TableName(prn)
   (
      (
         LOOKAHEAD(3)
         { n19 = new NodeSequence(10); }
         n21=<PARENTHESIS_START_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
         n22=CreateDefinition(prn)
         { n19.addNode(n22); }
         (
            { n24 = new NodeSequence(2); }
            n26="," { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24.addNode(n25); }
            n27=CreateDefinition(prn)
            { n24.addNode(n27); }
            { n23.addNode(n24); }
         )*
         { n23.nodes.trimToSize(); }
         { n19.addNode(n23); }
         n29=<PARENTHESIS_CLOSE_> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n19.addNode(n28); }
         (
            n31=PartitionDeclare(prn)
            { n30.addNode(n31); }
         )?
         { n19.addNode(n30); }
         (
            n33=inheritsDef(prn)
            { n32.addNode(n33); }
         )?
         { n19.addNode(n32); }
         (
            n35=WithXRowID(prn)
            { n34.addNode(n35); }
         )?
         { n19.addNode(n34); }
         (
            n37=OnCommitClause(prn)
            { n36.addNode(n37); }
         )?
         { n19.addNode(n36); }
         (
            n39=tablespaceDef(prn)
            { n38.addNode(n39); }
         )?
         { n19.addNode(n38); }
         { n18 = new NodeChoice(n19, 0); }
      |
         LOOKAHEAD(2)
         { n40 = new NodeSequence(8); }
         (
            { n42 = new NodeSequence(3); }
            n44=<PARENTHESIS_START_> { n43 = JTBToolkit.makeNodeToken(n44); }
            { n42.addNode(n43); }
            n45=ColumnNameList(prn)
            { n42.addNode(n45); }
            n47=<PARENTHESIS_CLOSE_> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n42.addNode(n46); }
            { n41.addNode(n42); }
         )?
         { n40.addNode(n41); }
         (
            n49=PartitionDeclare(prn)
            { n48.addNode(n49); }
         )?
         { n40.addNode(n48); }
         (
            n51=WithXRowID(prn)
            { n50.addNode(n51); }
         )?
         { n40.addNode(n50); }
         (
            n53=OnCommitClause(prn)
            { n52.addNode(n53); }
         )?
         { n40.addNode(n52); }
         (
            n55=tablespaceDef(prn)
            { n54.addNode(n55); }
         )?
         { n40.addNode(n54); }
         n57=<AS_> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n40.addNode(n56); }
         n58=SelectWithoutOrderAndSet(prn)
         { n40.addNode(n58); }
         { n18 = new NodeChoice(n40, 1); }
      )
      
   )
   
   { return new createTable(n0,n2,n15,n17,n18); }
}

OnCommitClause OnCommitClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<ON_COMMIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<PRESERVE_ROWS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<DELETE_ROWS_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<DROP_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new OnCommitClause(n0,n2); }
}

WithXRowID WithXRowID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<WITH_XROWID_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<WITHOUT_XROWID_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new WithXRowID(n0); }
}

tablespaceDef tablespaceDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
}
{
   n1=<TABLESPACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   
   { return new tablespaceDef(n0,n2); }
}

inheritsDef inheritsDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<INHERITS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new inheritsDef(n0,n2,n4,n5,n10); }
}

createView createView(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;
   NodeOptional n8 = new NodeOptional();
   ColumnNameListWithParenthesis n9;
   NodeToken n10;
   Token n11;
   SelectWithoutOrder n12;

   {
   }
}
{
   (
      (
         n2=<CREATE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REPLACE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<VIEW_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=TableName(prn)
   (
      n9=ColumnNameListWithParenthesis(prn)
      { n8.addNode(n9); }
   )?
   n11=<AS_> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=SelectWithoutOrder(prn)
   
   { return new createView(n0,n5,n7,n8,n10,n12); }
}

ColumnNameListWithParenthesis ColumnNameListWithParenthesis(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   ColumnNameList n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ColumnNameList(prn)
   n4=<PARENTHESIS_CLOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ColumnNameListWithParenthesis(n0,n2,n3); }
}

DropView DropView(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<VIEW_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new DropView(n0,n2,n4); }
}

dropTable dropTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   
   { return new dropTable(n0,n2,n4,n5); }
}

InsertTable InsertTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   SQLExpressionList n19;
   NodeToken n20;
   Token n21;
   SelectWithoutOrderWithParenthesis n22;

   {
   }
}
{
   n1=<INSERT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<INTO_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=TableName(prn)
   (
      LOOKAHEAD(<PARENTHESIS_START_> ColumnNameList(prn))
      { n7 = new NodeSequence(3); }
      n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=ColumnNameList(prn)
      { n7.addNode(n10); }
      n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n7.addNode(n11); }
      { n6.addNode(n7); }
   )?
   (
      (
         { n14 = new NodeSequence(4); }
         n16=<VALUES_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n18=<PARENTHESIS_START_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n14.addNode(n17); }
         n19=SQLExpressionList(prn)
         { n14.addNode(n19); }
         n21=<PARENTHESIS_CLOSE_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n14.addNode(n20); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n22=SelectWithoutOrderWithParenthesis(prn)
         { n13 = new NodeChoice(n22, 1); }
      )
      
   )
   
   { return new InsertTable(n0,n2,n5,n6,n13); }
}

PrimaryKeyDef PrimaryKeyDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<PRIMARYKEY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ColumnNameList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new PrimaryKeyDef(n0,n2,n4,n5); }
}

CheckDef CheckDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   skip_to_matching_brace n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CHECK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=skip_to_matching_brace(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CheckDef(n0,n2,n4,n5); }
}

JAVACODE
skip_to_matching_brace skip_to_matching_brace(PrintStream prn)
{
   Token tok;
   int nesting = 1;
   String str = new String();
   while ( true )
   {
      tok = getToken(1);
      if ( tok.kind == PARENTHESIS_START_ )
         nesting++;
      if ( tok.kind == PARENTHESIS_CLOSE_ )
      {
         nesting--;
         if ( nesting == 0 )
            break;
      }
      str += tok.image + " ";
      tok = getNextToken();
   }
   return new skip_to_matching_brace(str);
}

CreateDefinition CreateDefinition(PrintStream prn) :
{
   NodeChoice n0;
   ColumnDeclare n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Constraint n4;
   NodeChoice n5;
   PrimaryKeyDef n6;
   ForeignKeyDef n7;
   CheckDef n8;

   {
   }
}
{
   (
      n1=ColumnDeclare(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      (
         n4=Constraint(prn)
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      (
         (
            n6=PrimaryKeyDef(prn)
            { n5 = new NodeChoice(n6, 0); }
         |
            n7=ForeignKeyDef(prn)
            { n5 = new NodeChoice(n7, 1); }
         |
            n8=CheckDef(prn)
            { n5 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new CreateDefinition(n0); }
}

ColumnDeclare ColumnDeclare(PrintStream prn) :
{
   Identifier n0;
   types n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   DefaultSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   SQLComplexExpression n22;
   NodeToken n23;
   Token n24;

   {
   }
}
{
   n0=Identifier(prn)
   n1=types()
   (
      (
         { n4 = new NodeSequence(2); }
         n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<NULL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n10=<NULL_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n3 = new NodeChoice(n9, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      n12=DefaultSpec(prn)
      { n11.addNode(n12); }
   )?
   (
      n15=<PRIMARYKEY_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
   )?
   (
      { n17 = new NodeSequence(4); }
      n19=<CHECK_> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<PARENTHESIS_START_> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      n22=SQLComplexExpression(prn)
      { n17.addNode(n22); }
      n24=<PARENTHESIS_CLOSE_> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n17.addNode(n23); }
      { n16.addNode(n17); }
   )?
   
   { return new ColumnDeclare(n0,n1,n2,n11,n13,n16); }
}

ForeignKeyDef ForeignKeyDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;
   ColumnNameList n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<FOREIGNKEY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ColumnNameList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<REFERENCES_> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=TableName(prn)
   n11=<PARENTHESIS_START_> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=ColumnNameList(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ForeignKeyDef(n0,n2,n4,n5,n7,n9,n10,n12,n13); }
}

DefaultSpec DefaultSpec(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLSimpleExpression n2;

   {
   }
}
{
   n1=<DEFAULT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLSimpleExpression(prn)
   
   { return new DefaultSpec(n0,n2); }
}

PartitionDeclare PartitionDeclare(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Identifier n5;
   NodeToken n6;
   Token n7;
   PartitionChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   PartitionChoice n31;

   {
   }
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<PARTITIONINGKEY_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=Identifier(prn)
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      n7=<ON_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      n8=PartitionChoice(prn)
      { n1.addNode(n8); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(2); }
      n11=<PARTITION_WITH_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<PARENT_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 1); }
   |
      n15=<REPLICATED_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 2); }
   |
      { n16 = new NodeSequence(3); }
      n18=<ON_> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         (
            n21=<NODE_> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19 = new NodeChoice(n20, 0); }
         |
            n23=<NODES_> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n19 = new NodeChoice(n22, 1); }
         )
         
      )
      { n16.addNode(n19); }
      n25=<INT_LITERAL> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n16.addNode(n24); }
      { n0 = new NodeChoice(n16, 3); }
   |
      { n26 = new NodeSequence(3); }
      n28=<ROUND_ROBIN_> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
      n30=<ON_> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n26.addNode(n29); }
      n31=PartitionChoice(prn)
      { n26.addNode(n31); }
      { n0 = new NodeChoice(n26, 4); }
   )
   
   { return new PartitionDeclare(n0); }
}

PartitionChoice PartitionChoice(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodePartitionList n9;

   {
   }
}
{
   (
      n2=<ALL_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      (
         (
            n6=<NODE_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<NODES_> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         )
         
      )
      { n3.addNode(n4); }
      n9=NodePartitionList(prn)
      { n3.addNode(n9); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PartitionChoice(n0); }
}

NodePartitionList NodePartitionList(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<INT_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new NodePartitionList(n0,n2); }
}

types types() :
{
   NodeChoice n0;
   IntegerDataType n1;
   SmallIntDataType n2;
   RealDataType n3;
   DoublePrecision n4;
   FloatDataType n5;
   DecimalDataType n6;
   NumericDataType n7;
   FixedDataType n8;
   CharachterDataType n9;
   VarCharDataType n10;
   DateDataType n11;
   TimeDataType n12;
   TimeStampDataType n13;
   BooleanDataType n14;
   NationalCharDataType n15;
   SerialDataType n16;
   BigSerialDataType n17;
   BigIntDataType n18;
   IntervalDataType n19;
   TextDataType n20;
   BLOBDataType n21;
   BitDataType n22;
   VarBitDataType n23;
   MacAddrDataType n24;
   CidrDataType n25;
   InetDataType n26;

   {
   }
}
{
   (
      n1=IntegerDataType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SmallIntDataType()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=RealDataType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DoublePrecision()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FloatDataType()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=DecimalDataType()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=NumericDataType()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=FixedDataType()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=CharachterDataType()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=VarCharDataType()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=DateDataType()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=TimeDataType()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=TimeStampDataType()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=BooleanDataType()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=NationalCharDataType()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=SerialDataType()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=BigSerialDataType()
      { n0 = new NodeChoice(n17, 16); }
   |
      n18=BigIntDataType()
      { n0 = new NodeChoice(n18, 17); }
   |
      n19=IntervalDataType()
      { n0 = new NodeChoice(n19, 18); }
   |
      n20=TextDataType()
      { n0 = new NodeChoice(n20, 19); }
   |
      n21=BLOBDataType()
      { n0 = new NodeChoice(n21, 20); }
   |
      n22=BitDataType()
      { n0 = new NodeChoice(n22, 21); }
   |
      n23=VarBitDataType()
      { n0 = new NodeChoice(n23, 22); }
   |
      n24=MacAddrDataType()
      { n0 = new NodeChoice(n24, 23); }
   |
      n25=CidrDataType()
      { n0 = new NodeChoice(n25, 24); }
   |
      n26=InetDataType()
      { n0 = new NodeChoice(n26, 25); }
   )
   
   { return new types(n0); }
}

DatetimeField DatetimeField() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      n2=<YEAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QUARTER_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<MONTH_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<WEEK_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<DAY_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HOUR_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<MINUTE_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<SECOND_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new DatetimeField(n0); }
}

IntervalQualifier IntervalQualifier() :
{
   DatetimeField n0;
   NodeToken n1;
   Token n2;
   DatetimeField n3;

   {
   }
}
{
   n0=DatetimeField()
   n2=<TO_> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=DatetimeField()
   
   { return new IntervalQualifier(n0,n1,n3); }
}

IntervalDataType IntervalDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   IntervalQualifier n3;

   {
   }
}
{
   n1=<INTERVAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      n3=IntervalQualifier()
      { n2.addNode(n3); }
   )?
   
   { return new IntervalDataType(n0,n2); }
}

TextDataType TextDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      n2=<TEXT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CLOB_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LONG_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LONG_VARCHAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LONGTEXT_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<LVARCHAR_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<MEDIUMTEXT_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new TextDataType(n0); }
}

BLOBDataType BLOBDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      n2=<BLOB_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<BYTEA_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<BYTE_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<BINARY_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<IMAGE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<LONG_RAW_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<RAW_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<VARBINARY_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new BLOBDataType(n0); }
}

BitDataType BitDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
}
{
   n1=<BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   
   { return new BitDataType(n0,n2); }
}

VarBitDataType VarBitDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
}
{
   n1=<VARBIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   
   { return new VarBitDataType(n0,n2); }
}

MacAddrDataType MacAddrDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<MACADDR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new MacAddrDataType(n0); }
}

CidrDataType CidrDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CIDR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CidrDataType(n0); }
}

InetDataType InetDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new InetDataType(n0); }
}

BooleanDataType BooleanDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BOOLEAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanDataType(n0); }
}

SmallIntDataType SmallIntDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      { n1 = new NodeSequence(3); }
      (
         (
            n4=<SMALLINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<INT2_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      n10=UnsignedZeroFillSpecs()
      { n1.addNode(n10); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n12=<TINYINT_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 1); }
   )
   
   { return new SmallIntDataType(n0); }
}

BigIntDataType BigIntDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
}
{
   (
      (
         n2=<BIGINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<BIGINTEGER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<INT8_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   (
      n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=UnsignedZeroFillSpecs()
   
   { return new BigIntDataType(n0,n7,n10); }
}

SerialDataType SerialDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SERIAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SerialDataType(n0); }
}

BigSerialDataType BigSerialDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BIGSERIAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BigSerialDataType(n0); }
}

RealDataType RealDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnsignedZeroFillSpecs n7;

   {
   }
}
{
   (
      (
         n2=<REAL_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SMALLFLOAT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<FLOAT4_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=UnsignedZeroFillSpecs()
   
   { return new RealDataType(n0,n7); }
}

IntegerDataType IntegerDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
}
{
   (
      (
         n2=<INT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTEGER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<INT4_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   (
      n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=UnsignedZeroFillSpecs()
   
   { return new IntegerDataType(n0,n7,n10); }
}

FloatDataType FloatDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   UnsignedZeroFillSpecs n4;

   {
   }
}
{
   n1=<FLOAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   n4=UnsignedZeroFillSpecs()
   
   { return new FloatDataType(n0,n2,n4); }
}

TimeStampDataType TimeStampDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   LengthSpec n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<TIMESTAMP_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=LengthSpec()
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      (
         LOOKAHEAD(2)
         (
            (
               n9=<WITH_TIMEZONE_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n7 = new NodeChoice(n8, 0); }
            |
               n11=<WITHOUT_TIMEZONE_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n7 = new NodeChoice(n10, 1); }
            )
            
         )
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n13=<DATETIME_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 1); }
   |
      n15=<SAMLLDATETIME_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 2); }
   )
   
   { return new TimeStampDataType(n0); }
}

TimeDataType TimeDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   (
      LOOKAHEAD(2)
      (
         (
            n7=<WITH_TIMEZONE_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<WITHOUT_TIMEZONE_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         
      )
      { n4.addNode(n5); }
   )?
   
   { return new TimeDataType(n0,n2,n4); }
}

DateDataType DateDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DateDataType(n0); }
}

VarCharDataType VarCharDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   LengthSpec n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4=<VARCHAR_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<VARCHAR2_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n8=LengthSpec()
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n10=<TINYTEXT_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new VarCharDataType(n0); }
}

NumericDataType NumericDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   PrecisionSpec n8;
   UnsignedZeroFillSpecs n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      (
         (
            n4=<NUMERIC_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<NUMBER_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n8=PrecisionSpec()
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      n9=UnsignedZeroFillSpecs()
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n11=<MONEY_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 1); }
   |
      n13=<SMALLMONEY_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 2); }
   |
      n15=<YEAR_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 3); }
   )
   
   { return new NumericDataType(n0); }
}

DecimalDataType DecimalDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   PrecisionSpec n6;
   UnsignedZeroFillSpecs n7;

   {
   }
}
{
   (
      (
         n2=<DECIMAL_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DEC_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n6=PrecisionSpec()
      { n5.addNode(n6); }
   )?
   n7=UnsignedZeroFillSpecs()
   
   { return new DecimalDataType(n0,n5,n7); }
}

FixedDataType FixedDataType() :
{
   NodeToken n0;
   Token n1;
   PrecisionSpec n2;
   UnsignedZeroFillSpecs n3;

   {
   }
}
{
   n1=<FIXED_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrecisionSpec()
   n3=UnsignedZeroFillSpecs()
   
   { return new FixedDataType(n0,n2,n3); }
}

NationalCharDataType NationalCharDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   LengthSpec n15;

   {
   }
}
{
   (
      (
         n2=<NCHAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(2); }
         n5=<NATIONAL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            (
               n8=<CHAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6 = new NodeChoice(n7, 0); }
            |
               n10=<CHARACHTER_> { n9 = JTBToolkit.makeNodeToken(n10); }
               { n6 = new NodeChoice(n9, 1); }
            )
            
         )
         { n3.addNode(n6); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      LOOKAHEAD(2)
      n13=<VARYING_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   (
      n15=LengthSpec()
      { n14.addNode(n15); }
   )?
   
   { return new NationalCharDataType(n0,n11,n14); }
}

DoublePrecision DoublePrecision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<DOUBLE_PRECISION_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOAT8_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new DoublePrecision(n0); }
}

CharachterDataType CharachterDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   LengthSpec n9;

   {
   }
}
{
   (
      (
         n2=<CHARACHTER_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHAR_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      LOOKAHEAD(2)
      n7=<VARYING_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      n9=LengthSpec()
      { n8.addNode(n9); }
   )?
   
   { return new CharachterDataType(n0,n5,n8); }
}

LengthSpec LengthSpec() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new LengthSpec(n0,n2,n4); }
}

UnsignedZeroFillSpecs UnsignedZeroFillSpecs() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   (
      n2=<UNSIGNED_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<ZEROFILL_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new UnsignedZeroFillSpecs(n0,n3); }
}

PrecisionSpec PrecisionSpec() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new PrecisionSpec(n0,n2,n4,n10); }
}

SelectWithParenthesis SelectWithParenthesis(PrintStream prn) :
{
   Select n0;

   {
   }
}
{
   n0=Select(prn)
   
   { return new SelectWithParenthesis(n0); }
}

Select Select(PrintStream prn) :
{
   SelectWithoutOrderWithParenthesis n0;
   NodeOptional n1 = new NodeOptional();
   OrderByClause n2;
   NodeOptional n3 = new NodeOptional();
   LimitClause n4;
   NodeOptional n5 = new NodeOptional();
   OffsetClause n6;

   {
   }
}
{
   n0=SelectWithoutOrderWithParenthesis(prn)
   (
      n2=OrderByClause(prn)
      { n1.addNode(n2); }
   )?
   (
      n4=LimitClause(prn)
      { n3.addNode(n4); }
   )?
   (
      n6=OffsetClause(prn)
      { n5.addNode(n6); }
   )?
   
   { return new Select(n0,n1,n3,n5); }
}

SelectWithoutOrderWithParenthesis SelectWithoutOrderWithParenthesis(PrintStream prn) :
{
   SelectWithoutOrder n0;

   {
   }
}
{
   n0=SelectWithoutOrder(prn)
   
   { return new SelectWithoutOrderWithParenthesis(n0); }
}

SelectWithoutOrder SelectWithoutOrder(PrintStream prn) :
{
   SelectWithoutOrderAndSetWithParenthesis n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SelectWithoutOrderAndSet n9;
   UnionSpec n10;

   {
   }
}
{
   n0=SelectWithoutOrderAndSetWithParenthesis(prn)
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<UNION_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      (
         (
            n9=SelectWithoutOrderAndSet(prn)
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=UnionSpec(prn)
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SelectWithoutOrder(n0,n1); }
}

SelectWithoutOrderAndSetWithParenthesis SelectWithoutOrderAndSetWithParenthesis(PrintStream prn) :
{
   NodeChoice n0;
   SelectWithoutOrderAndSet n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectWithoutOrderAndSetWithParenthesis n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   (
      n1=SelectWithoutOrderAndSet(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4=<PARENTHESIS_START_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SelectWithoutOrderAndSetWithParenthesis(prn)
      { n2.addNode(n5); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SelectWithoutOrderAndSetWithParenthesis(n0); }
}

UnionSpec UnionSpec(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SelectWithoutOrder n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SelectWithoutOrder(prn)
   n4=<PARENTHESIS_CLOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new UnionSpec(n0,n2,n3); }
}

SelectWithoutOrderAndSet SelectWithoutOrderAndSet(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   NodeOptional n11 = new NodeOptional();
   IntoClause n12;
   NodeOptional n13 = new NodeOptional();
   FromClause n14;
   NodeOptional n15 = new NodeOptional();
   WhereClause n16;
   NodeOptional n17 = new NodeOptional();
   GroupByClause n18;
   NodeOptional n19 = new NodeOptional();
   HavingClause n20;

   {
   }
}
{
   n1=<SELECT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<ALL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<DISTINCT_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<UNIQUE_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      )
      { n2.addNode(n3); }
   )?
   n10=SelectList(prn)
   (
      n12=IntoClause(prn)
      { n11.addNode(n12); }
   )?
   (
      n14=FromClause(prn)
      { n13.addNode(n14); }
   )?
   (
      n16=WhereClause(prn)
      { n15.addNode(n16); }
   )?
   (
      n18=GroupByClause(prn)
      { n17.addNode(n18); }
   )?
   (
      n20=HavingClause(prn)
      { n19.addNode(n20); }
   )?
   
   { return new SelectWithoutOrderAndSet(n0,n2,n10,n11,n13,n15,n17,n19); }
}

SelectList SelectList(PrintStream prn) :
{
   SelectTupleSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectTupleSpec n5;

   {
   }
}
{
   n0=SelectTupleSpec(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SelectTupleSpec(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SelectList(n0,n1); }
}

SelectTupleSpec SelectTupleSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   SQLSimpleExpression n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;

   {
   }
}
{
   (
      (
         n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(TableName(prn) "." <STAR_>)
         { n3 = new NodeSequence(4); }
         n4=TableName(prn)
         { n3.addNode(n4); }
         n6="." { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3.addNode(n5); }
         n8=<STAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 1); }
      |
         { n9 = new NodeSequence(2); }
         n10=SQLSimpleExpression(prn)
         { n9.addNode(n10); }
         (
            LOOKAHEAD(2)
            n12=SelectAliasSpec(prn)
            { n11.addNode(n12); }
         )?
         { n9.addNode(n11); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   
   { return new SelectTupleSpec(n0); }
}

SQLSimpleExpression SQLSimpleExpression(PrintStream prn) :
{
   SQLMultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   SimpleExpressionOperand n2;

   {
   }
}
{
   n0=SQLMultiplicativeExpression(prn)
   (
      LOOKAHEAD(2)
      n2=SimpleExpressionOperand(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLSimpleExpression(n0,n1); }
}

SQLMultiplicativeExpression SQLMultiplicativeExpression(PrintStream prn) :
{
   SQLPrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLMultiplicativeExpressionOperand n2;

   {
   }
}
{
   n0=SQLPrimaryExpression(prn)
   (
      LOOKAHEAD(2)
      n2=SQLMultiplicativeExpressionOperand(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLMultiplicativeExpression(n0,n1); }
}

SQLMultiplicativeExpressionOperand SQLMultiplicativeExpressionOperand(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   SQLPrimaryExpression n25;

   {
   }
}
{
   (
      (
         n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DIVIDE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<MOD_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<DIV_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<MODULO_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<AND_BITWISE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<OR_BITWISE_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<XOR_BITWISE_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<SHIFT_LEFT_BITWISE_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20=<SHIFT_RIGHT_BITWISE_> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22=<CONTAINED_WITHIN_OR_EQUALS_> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      |
         n24=<CONTAINS_OR_EQUALS_> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 11); }
      )
      
   )
   n25=SQLPrimaryExpression(prn)
   
   { return new SQLMultiplicativeExpressionOperand(n0,n25); }
}

SimpleExpressionOperand SimpleExpressionOperand(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLMultiplicativeExpression n7;

   {
   }
}
{
   (
      (
         n2=<PLUS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MINUS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<CONCAT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=SQLMultiplicativeExpression(prn)
   
   { return new SimpleExpressionOperand(n0,n7); }
}

SQLPrimaryExpression SQLPrimaryExpression(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   FunctionCall n19;
   TableColumn n20;
   PseudoColumn n21;
   numberValue n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   SQLComplexExpression n26;
   NodeToken n27;
   Token n28;
   booleanLiteral n29;
   stringLiteral n30;
   NullLiterals n31;
   IntervalLiterals n32;
   TextLiterals n33;
   PreparedStmtParameter n34;
   TimeStampLiteral n35;
   TimeLiteral n36;
   DateLiteral n37;
   binaryLiteral n38;
   hex_decimalLiteral n39;
   IntegerLiteral n40;
   MacaddrLiteral n41;
   CidrLiteral n42;
   InetLiteral n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   types n51;

   {
   }
}
{
   (
      (
         n3=<SQUARE_ROOT_> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<CUBE_ROOT_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<FACTORIAL_PREFIX_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      |
         n9=<ABSOLUTE_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n1 = new NodeChoice(n8, 3); }
      |
         n11=<NOT_BITWISE_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1 = new NodeChoice(n10, 4); }
      )
      { n0.addNode(n1); }
   )?
   (
      (
         n15=<PLUS_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<MINUS_> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      { n12.addNode(n13); }
   )?
   (
      (
         LOOKAHEAD(2)
         n19=FunctionCall(prn)
         { n18 = new NodeChoice(n19, 0); }
      |
         LOOKAHEAD(2)
         n20=TableColumn(prn)
         { n18 = new NodeChoice(n20, 1); }
      |
         LOOKAHEAD(2)
         n21=PseudoColumn(prn)
         { n18 = new NodeChoice(n21, 2); }
      |
         n22=numberValue(prn)
         { n18 = new NodeChoice(n22, 3); }
      |
         LOOKAHEAD(2)
         { n23 = new NodeSequence(4); }
         n25=<PARENTHESIS_START_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         n26=SQLComplexExpression(prn)
         { n23.addNode(n26); }
         n28=<PARENTHESIS_CLOSE_> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n23.addNode(n27); }
         { n18 = new NodeChoice(n23, 4); }
      |
         n29=booleanLiteral(prn)
         { n18 = new NodeChoice(n29, 5); }
      |
         n30=stringLiteral(prn)
         { n18 = new NodeChoice(n30, 6); }
      |
         n31=NullLiterals(prn)
         { n18 = new NodeChoice(n31, 7); }
      |
         LOOKAHEAD(2)
         n32=IntervalLiterals(prn)
         { n18 = new NodeChoice(n32, 8); }
      |
         LOOKAHEAD(2)
         n33=TextLiterals(prn)
         { n18 = new NodeChoice(n33, 9); }
      |
         LOOKAHEAD(2)
         n34=PreparedStmtParameter(prn)
         { n18 = new NodeChoice(n34, 10); }
      |
         n35=TimeStampLiteral(prn)
         { n18 = new NodeChoice(n35, 11); }
      |
         n36=TimeLiteral(prn)
         { n18 = new NodeChoice(n36, 12); }
      |
         n37=DateLiteral(prn)
         { n18 = new NodeChoice(n37, 13); }
      |
         n38=binaryLiteral(prn)
         { n18 = new NodeChoice(n38, 14); }
      |
         n39=hex_decimalLiteral(prn)
         { n18 = new NodeChoice(n39, 15); }
      |
         n40=IntegerLiteral(prn)
         { n18 = new NodeChoice(n40, 16); }
      |
         n41=MacaddrLiteral(prn)
         { n18 = new NodeChoice(n41, 17); }
      |
         n42=CidrLiteral(prn)
         { n18 = new NodeChoice(n42, 18); }
      |
         n43=InetLiteral(prn)
         { n18 = new NodeChoice(n43, 19); }
      )
      
   )
   (
      n46=<FACTORIAL_> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n44.addNode(n45); }
   )?
   (
      { n48 = new NodeSequence(2); }
      n50="::" { n49 = JTBToolkit.makeNodeToken(n50); }
      { n48.addNode(n49); }
      n51=types()
      { n48.addNode(n51); }
      { n47.addNode(n48); }
   )?
   
   { return new SQLPrimaryExpression(n0,n12,n18,n44,n47); }
}

PreparedStmtParameter PreparedStmtParameter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<PARAM_PLACE_HOLDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PreparedStmtParameter(n0); }
}

TimeStampLiteral TimeStampLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TIMESTAMP_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TimeStampLiteral(n0); }
}

TimeLiteral TimeLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TIME_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TimeLiteral(n0); }
}

DateLiteral DateLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<DATE_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DateLiteral(n0); }
}

IntervalLiterals IntervalLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INTERVAL_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntervalLiterals(n0); }
}

TextLiterals TextLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TEXT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TextLiterals(n0); }
}

NullLiterals NullLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<NULL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiterals(n0); }
}

booleanLiteral booleanLiteral(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<TRUE_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new booleanLiteral(n0); }
}

binaryLiteral binaryLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BINARY_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new binaryLiteral(n0); }
}

hex_decimalLiteral hex_decimalLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<HEXDECIMAL_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new hex_decimalLiteral(n0); }
}

IntegerLiteral IntegerLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

MacaddrLiteral MacaddrLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<MACADDR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new MacaddrLiteral(n0); }
}

CidrLiteral CidrLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CIDR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CidrLiteral(n0); }
}

InetLiteral InetLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INET_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new InetLiteral(n0); }
}

PseudoColumn PseudoColumn(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   FromClause n11;
   NodeOptional n12 = new NodeOptional();
   WhereClause n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SELECT_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DISTINCT_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      { n4.addNode(n5); }
   )?
   n10=SelectList(prn)
   n11=FromClause(prn)
   (
      n13=WhereClause(prn)
      { n12.addNode(n13); }
   )?
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new PseudoColumn(n0,n2,n4,n10,n11,n12,n14); }
}

SQLArgumentList SQLArgumentList(PrintStream prn) :
{
   SQLArgument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLArgument n5;

   {
   }
}
{
   n0=SQLArgument(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLArgument(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLArgumentList(n0,n1); }
}

SQLArgument SQLArgument(PrintStream prn) :
{
   SQLSimpleExpression n0;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   
   { return new SQLArgument(n0); }
}

CharString CharString(PrintStream prn) :
{
   extendbObject n0;

   {
   }
}
{
   n0=extendbObject(prn)
   
   { return new CharString(n0); }
}

FunctionCall FunctionCall(PrintStream prn) :
{
   NodeChoice n0;
   Func_Trunc n1;
   Func_Date n2;
   Func_Time n3;
   Func_TimeStamp n4;
   Func_CurrentDate n5;
   Func_PgCurrentDate n6;
   Func_CurrentTime n7;
   Func_PgCurrentTime n8;
   Func_PgCurrentTimeStamp n9;
   Func_Year n10;
   Func_Month n11;
   Func_Hour n12;
   Func_Minute n13;
   Func_Second n14;
   Func_AddDate n15;
   Func_AddTime n16;
   Func_DateDiff n17;
   Func_Day n18;
   Func_DayName n19;
   Func_DayOfMonth n20;
   Func_DayOfWeek n21;
   Func_DayOfYear n22;
   Func_MonthName n23;
   Func_SubDate n24;
   Func_SubTime n25;
   Func_WeekOfYear n26;
   Func_Now n27;
   Func_Abs n28;
   Func_Ceil n29;
   Func_Ceiling n30;
   Func_Exp n31;
   Func_Floor n32;
   Func_LN n33;
   Func_Log n34;
   Func_PI n35;
   Func_Power n36;
   Func_Round n37;
   Func_Sign n38;
   Func_TAsin n39;
   Func_TAtan n40;
   Func_TCos n41;
   Func_TCot n42;
   Func_TDegree n43;
   Func_Radians n44;
   Func_Sin n45;
   Func_Tan n46;
   Func_Avg n47;
   Func_Count n48;
   Func_Max n49;
   Func_Min n50;
   Func_Stdev n51;
   Func_Sum n52;
   Func_Variance n53;
   Func_Ascii n54;
   Func_Index n55;
   Func_Left n56;
   Func_Length n57;
   Func_Lower n58;
   Func_Lpad n59;
   Func_Rpad n60;
   Func_Ltrim n61;
   Func_Replace n62;
   Func_Right n63;
   Func_Rtrim n64;
   Func_SubStr n65;
   Func_Trim n66;
   Func_Upper n67;
   Func_Database n68;
   Func_Value n69;
   Func_Version n70;
   Func_Case n71;
   Func_TACos n72;
   Func_Log10 n73;
   Func_Mod n74;
   Func_Sqrt n75;
   Func_Least n76;
   Func_TCosh n77;
   Func_Float n78;
   Func_Greatest n79;
   Func_TATan2 n80;
   Func_TATn2 n81;
   Func_SoundEx n82;
   Func_InitCap n83;
   Func_LFill n84;
   Func_MapChar n85;
   Func_NUM n86;
   Func_Concat n87;
   Func_User n88;
   Func_Cast n89;
   Func_TimeOfDay n90;
   Func_Custom n91;
   Func_IsFinite n92;
   Func_Extract n93;
   Func_DateTrunc n94;
   Func_DatePart n95;
   Func_Age n96;
   Func_LocalTime n97;
   Func_LocalTimeStamp n98;
   Func_BitLength n99;
   Func_CharLength n100;
   Func_Convert n101;
   Func_OctetLength n102;
   Func_Overlay n103;
   Func_Position n104;
   Func_Substring n105;
   Func_ToHex n106;
   Func_QuoteLiteral n107;
   Func_QuoteIdent n108;
   Func_Md5 n109;
   Func_Chr n110;
   Func_PgClientEncoding n111;
   Func_Translate n112;
   Func_ToAscii n113;
   Func_StrPos n114;
   Func_SplitPart n115;
   Func_Repeat n116;
   Func_Encode n117;
   Func_Decode n118;
   Func_Btrim n119;
   Func_Width_bucket n120;
   Func_Setseed n121;
   Func_Random n122;
   Func_Cbrt n123;
   Func_GetBit n124;
   Func_GetByte n125;
   Func_ToDate n126;
   Func_ClockTimeStamp n127;
   Func_StatementTimeStamp n128;
   Func_TransactionTimeStamp n129;
   Func_NullIf n130;
   Func_SetBit n131;
   Func_SetByte n132;
   Func_ToChar n133;
   Func_ToNumber n134;
   Func_ToTimestamp n135;
   Func_AddMonths n136;
   Func_JustifyDays n137;
   Func_JustifyHours n138;
   Func_JustifyInterval n139;
   Func_LastDay n140;
   Func_MonthsBetween n141;
   Func_NextDay n142;
   Func_CurrentDatabase n143;
   Func_CurrentSchema n144;
   Func_SysDate n145;
   Func_BitAnd n146;
   Func_BitOr n147;
   Func_BoolAnd n148;
   Func_BoolOr n149;
   Func_CorrCov n150;
   Func_Regr n151;
   Func_RegexReplace n152;
   Func_Nvl n153;
   Func_Coalesce n154;
   Func_Abbrev n155;
   Func_Broadcast n156;
   Func_Family n157;
   Func_Host n158;
   Func_Hostmask n159;
   Func_Masklen n160;
   Func_Netmask n161;
   Func_Network n162;
   Func_Set_Masklen n163;
   Func_Text n164;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      n1=Func_Trunc(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=Func_Date(prn)
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=Func_Time(prn)
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(2)
      n4=Func_TimeStamp(prn)
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(2)
      n5=Func_CurrentDate(prn)
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=Func_PgCurrentDate(prn)
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(2)
      n7=Func_CurrentTime(prn)
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(2)
      n8=Func_PgCurrentTime(prn)
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(2)
      n9=Func_PgCurrentTimeStamp(prn)
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(2)
      n10=Func_Year(prn)
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(2)
      n11=Func_Month(prn)
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(2)
      n12=Func_Hour(prn)
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(2)
      n13=Func_Minute(prn)
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(2)
      n14=Func_Second(prn)
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(2)
      n15=Func_AddDate(prn)
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(2)
      n16=Func_AddTime(prn)
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(2)
      n17=Func_DateDiff(prn)
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(4)
      n18=Func_Day(prn)
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(2)
      n19=Func_DayName(prn)
      { n0 = new NodeChoice(n19, 18); }
   |
      LOOKAHEAD(2)
      n20=Func_DayOfMonth(prn)
      { n0 = new NodeChoice(n20, 19); }
   |
      LOOKAHEAD(2)
      n21=Func_DayOfWeek(prn)
      { n0 = new NodeChoice(n21, 20); }
   |
      LOOKAHEAD(2)
      n22=Func_DayOfYear(prn)
      { n0 = new NodeChoice(n22, 21); }
   |
      LOOKAHEAD(2)
      n23=Func_MonthName(prn)
      { n0 = new NodeChoice(n23, 22); }
   |
      LOOKAHEAD(2)
      n24=Func_SubDate(prn)
      { n0 = new NodeChoice(n24, 23); }
   |
      LOOKAHEAD(2)
      n25=Func_SubTime(prn)
      { n0 = new NodeChoice(n25, 24); }
   |
      LOOKAHEAD(2)
      n26=Func_WeekOfYear(prn)
      { n0 = new NodeChoice(n26, 25); }
   |
      LOOKAHEAD(2)
      n27=Func_Now(prn)
      { n0 = new NodeChoice(n27, 26); }
   |
      LOOKAHEAD(2)
      n28=Func_Abs(prn)
      { n0 = new NodeChoice(n28, 27); }
   |
      LOOKAHEAD(2)
      n29=Func_Ceil(prn)
      { n0 = new NodeChoice(n29, 28); }
   |
      LOOKAHEAD(2)
      n30=Func_Ceiling(prn)
      { n0 = new NodeChoice(n30, 29); }
   |
      LOOKAHEAD(2)
      n31=Func_Exp(prn)
      { n0 = new NodeChoice(n31, 30); }
   |
      LOOKAHEAD(2)
      n32=Func_Floor(prn)
      { n0 = new NodeChoice(n32, 31); }
   |
      LOOKAHEAD(2)
      n33=Func_LN(prn)
      { n0 = new NodeChoice(n33, 32); }
   |
      LOOKAHEAD(2)
      n34=Func_Log(prn)
      { n0 = new NodeChoice(n34, 33); }
   |
      LOOKAHEAD(2)
      n35=Func_PI(prn)
      { n0 = new NodeChoice(n35, 34); }
   |
      LOOKAHEAD(2)
      n36=Func_Power(prn)
      { n0 = new NodeChoice(n36, 35); }
   |
      LOOKAHEAD(2)
      n37=Func_Round(prn)
      { n0 = new NodeChoice(n37, 36); }
   |
      LOOKAHEAD(2)
      n38=Func_Sign(prn)
      { n0 = new NodeChoice(n38, 37); }
   |
      LOOKAHEAD(2)
      n39=Func_TAsin(prn)
      { n0 = new NodeChoice(n39, 38); }
   |
      LOOKAHEAD(2)
      n40=Func_TAtan(prn)
      { n0 = new NodeChoice(n40, 39); }
   |
      LOOKAHEAD(2)
      n41=Func_TCos(prn)
      { n0 = new NodeChoice(n41, 40); }
   |
      LOOKAHEAD(2)
      n42=Func_TCot(prn)
      { n0 = new NodeChoice(n42, 41); }
   |
      LOOKAHEAD(2)
      n43=Func_TDegree(prn)
      { n0 = new NodeChoice(n43, 42); }
   |
      LOOKAHEAD(2)
      n44=Func_Radians(prn)
      { n0 = new NodeChoice(n44, 43); }
   |
      LOOKAHEAD(2)
      n45=Func_Sin(prn)
      { n0 = new NodeChoice(n45, 44); }
   |
      LOOKAHEAD(2)
      n46=Func_Tan(prn)
      { n0 = new NodeChoice(n46, 45); }
   |
      LOOKAHEAD(2)
      n47=Func_Avg(prn)
      { n0 = new NodeChoice(n47, 46); }
   |
      LOOKAHEAD(2)
      n48=Func_Count(prn)
      { n0 = new NodeChoice(n48, 47); }
   |
      LOOKAHEAD(2)
      n49=Func_Max(prn)
      { n0 = new NodeChoice(n49, 48); }
   |
      LOOKAHEAD(2)
      n50=Func_Min(prn)
      { n0 = new NodeChoice(n50, 49); }
   |
      LOOKAHEAD(2)
      n51=Func_Stdev(prn)
      { n0 = new NodeChoice(n51, 50); }
   |
      LOOKAHEAD(2)
      n52=Func_Sum(prn)
      { n0 = new NodeChoice(n52, 51); }
   |
      LOOKAHEAD(2)
      n53=Func_Variance(prn)
      { n0 = new NodeChoice(n53, 52); }
   |
      LOOKAHEAD(2)
      n54=Func_Ascii(prn)
      { n0 = new NodeChoice(n54, 53); }
   |
      LOOKAHEAD(2)
      n55=Func_Index(prn)
      { n0 = new NodeChoice(n55, 54); }
   |
      LOOKAHEAD(2)
      n56=Func_Left(prn)
      { n0 = new NodeChoice(n56, 55); }
   |
      LOOKAHEAD(2)
      n57=Func_Length(prn)
      { n0 = new NodeChoice(n57, 56); }
   |
      LOOKAHEAD(2)
      n58=Func_Lower(prn)
      { n0 = new NodeChoice(n58, 57); }
   |
      LOOKAHEAD(2)
      n59=Func_Lpad(prn)
      { n0 = new NodeChoice(n59, 58); }
   |
      LOOKAHEAD(2)
      n60=Func_Rpad(prn)
      { n0 = new NodeChoice(n60, 59); }
   |
      LOOKAHEAD(2)
      n61=Func_Ltrim(prn)
      { n0 = new NodeChoice(n61, 60); }
   |
      LOOKAHEAD(2)
      n62=Func_Replace(prn)
      { n0 = new NodeChoice(n62, 61); }
   |
      LOOKAHEAD(2)
      n63=Func_Right(prn)
      { n0 = new NodeChoice(n63, 62); }
   |
      LOOKAHEAD(2)
      n64=Func_Rtrim(prn)
      { n0 = new NodeChoice(n64, 63); }
   |
      LOOKAHEAD(2)
      n65=Func_SubStr(prn)
      { n0 = new NodeChoice(n65, 64); }
   |
      LOOKAHEAD(2)
      n66=Func_Trim(prn)
      { n0 = new NodeChoice(n66, 65); }
   |
      LOOKAHEAD(2)
      n67=Func_Upper(prn)
      { n0 = new NodeChoice(n67, 66); }
   |
      LOOKAHEAD(2)
      n68=Func_Database(prn)
      { n0 = new NodeChoice(n68, 67); }
   |
      LOOKAHEAD(2)
      n69=Func_Value(prn)
      { n0 = new NodeChoice(n69, 68); }
   |
      LOOKAHEAD(2)
      n70=Func_Version(prn)
      { n0 = new NodeChoice(n70, 69); }
   |
      LOOKAHEAD(2)
      n71=Func_Case(prn)
      { n0 = new NodeChoice(n71, 70); }
   |
      LOOKAHEAD(2)
      n72=Func_TACos(prn)
      { n0 = new NodeChoice(n72, 71); }
   |
      LOOKAHEAD(2)
      n73=Func_Log10(prn)
      { n0 = new NodeChoice(n73, 72); }
   |
      LOOKAHEAD(2)
      n74=Func_Mod(prn)
      { n0 = new NodeChoice(n74, 73); }
   |
      LOOKAHEAD(2)
      n75=Func_Sqrt(prn)
      { n0 = new NodeChoice(n75, 74); }
   |
      LOOKAHEAD(2)
      n76=Func_Least(prn)
      { n0 = new NodeChoice(n76, 75); }
   |
      LOOKAHEAD(2)
      n77=Func_TCosh(prn)
      { n0 = new NodeChoice(n77, 76); }
   |
      LOOKAHEAD(2)
      n78=Func_Float(prn)
      { n0 = new NodeChoice(n78, 77); }
   |
      LOOKAHEAD(2)
      n79=Func_Greatest(prn)
      { n0 = new NodeChoice(n79, 78); }
   |
      LOOKAHEAD(2)
      n80=Func_TATan2(prn)
      { n0 = new NodeChoice(n80, 79); }
   |
      LOOKAHEAD(2)
      n81=Func_TATn2(prn)
      { n0 = new NodeChoice(n81, 80); }
   |
      LOOKAHEAD(2)
      n82=Func_SoundEx(prn)
      { n0 = new NodeChoice(n82, 81); }
   |
      LOOKAHEAD(2)
      n83=Func_InitCap(prn)
      { n0 = new NodeChoice(n83, 82); }
   |
      LOOKAHEAD(2)
      n84=Func_LFill(prn)
      { n0 = new NodeChoice(n84, 83); }
   |
      LOOKAHEAD(2)
      n85=Func_MapChar(prn)
      { n0 = new NodeChoice(n85, 84); }
   |
      LOOKAHEAD(2)
      n86=Func_NUM(prn)
      { n0 = new NodeChoice(n86, 85); }
   |
      LOOKAHEAD(2)
      n87=Func_Concat(prn)
      { n0 = new NodeChoice(n87, 86); }
   |
      LOOKAHEAD(2)
      n88=Func_User(prn)
      { n0 = new NodeChoice(n88, 87); }
   |
      LOOKAHEAD(2)
      n89=Func_Cast(prn)
      { n0 = new NodeChoice(n89, 88); }
   |
      LOOKAHEAD(2)
      n90=Func_TimeOfDay(prn)
      { n0 = new NodeChoice(n90, 89); }
   |
      LOOKAHEAD(3)
      n91=Func_Custom(prn)
      { n0 = new NodeChoice(n91, 90); }
   |
      LOOKAHEAD(2)
      n92=Func_IsFinite(prn)
      { n0 = new NodeChoice(n92, 91); }
   |
      LOOKAHEAD(2)
      n93=Func_Extract(prn)
      { n0 = new NodeChoice(n93, 92); }
   |
      LOOKAHEAD(2)
      n94=Func_DateTrunc(prn)
      { n0 = new NodeChoice(n94, 93); }
   |
      LOOKAHEAD(2)
      n95=Func_DatePart(prn)
      { n0 = new NodeChoice(n95, 94); }
   |
      LOOKAHEAD(2)
      n96=Func_Age(prn)
      { n0 = new NodeChoice(n96, 95); }
   |
      LOOKAHEAD(2)
      n97=Func_LocalTime(prn)
      { n0 = new NodeChoice(n97, 96); }
   |
      LOOKAHEAD(2)
      n98=Func_LocalTimeStamp(prn)
      { n0 = new NodeChoice(n98, 97); }
   |
      LOOKAHEAD(2)
      n99=Func_BitLength(prn)
      { n0 = new NodeChoice(n99, 98); }
   |
      LOOKAHEAD(2)
      n100=Func_CharLength(prn)
      { n0 = new NodeChoice(n100, 99); }
   |
      LOOKAHEAD(2)
      n101=Func_Convert(prn)
      { n0 = new NodeChoice(n101, 100); }
   |
      LOOKAHEAD(2)
      n102=Func_OctetLength(prn)
      { n0 = new NodeChoice(n102, 101); }
   |
      LOOKAHEAD(2)
      n103=Func_Overlay(prn)
      { n0 = new NodeChoice(n103, 102); }
   |
      LOOKAHEAD(2)
      n104=Func_Position(prn)
      { n0 = new NodeChoice(n104, 103); }
   |
      LOOKAHEAD(2)
      n105=Func_Substring(prn)
      { n0 = new NodeChoice(n105, 104); }
   |
      LOOKAHEAD(2)
      n106=Func_ToHex(prn)
      { n0 = new NodeChoice(n106, 105); }
   |
      LOOKAHEAD(2)
      n107=Func_QuoteLiteral(prn)
      { n0 = new NodeChoice(n107, 106); }
   |
      LOOKAHEAD(2)
      n108=Func_QuoteIdent(prn)
      { n0 = new NodeChoice(n108, 107); }
   |
      LOOKAHEAD(2)
      n109=Func_Md5(prn)
      { n0 = new NodeChoice(n109, 108); }
   |
      LOOKAHEAD(2)
      n110=Func_Chr(prn)
      { n0 = new NodeChoice(n110, 109); }
   |
      LOOKAHEAD(2)
      n111=Func_PgClientEncoding(prn)
      { n0 = new NodeChoice(n111, 110); }
   |
      LOOKAHEAD(2)
      n112=Func_Translate(prn)
      { n0 = new NodeChoice(n112, 111); }
   |
      LOOKAHEAD(2)
      n113=Func_ToAscii(prn)
      { n0 = new NodeChoice(n113, 112); }
   |
      LOOKAHEAD(2)
      n114=Func_StrPos(prn)
      { n0 = new NodeChoice(n114, 113); }
   |
      LOOKAHEAD(2)
      n115=Func_SplitPart(prn)
      { n0 = new NodeChoice(n115, 114); }
   |
      LOOKAHEAD(2)
      n116=Func_Repeat(prn)
      { n0 = new NodeChoice(n116, 115); }
   |
      LOOKAHEAD(2)
      n117=Func_Encode(prn)
      { n0 = new NodeChoice(n117, 116); }
   |
      LOOKAHEAD(2)
      n118=Func_Decode(prn)
      { n0 = new NodeChoice(n118, 117); }
   |
      LOOKAHEAD(2)
      n119=Func_Btrim(prn)
      { n0 = new NodeChoice(n119, 118); }
   |
      LOOKAHEAD(2)
      n120=Func_Width_bucket(prn)
      { n0 = new NodeChoice(n120, 119); }
   |
      LOOKAHEAD(2)
      n121=Func_Setseed(prn)
      { n0 = new NodeChoice(n121, 120); }
   |
      LOOKAHEAD(2)
      n122=Func_Random(prn)
      { n0 = new NodeChoice(n122, 121); }
   |
      LOOKAHEAD(2)
      n123=Func_Cbrt(prn)
      { n0 = new NodeChoice(n123, 122); }
   |
      LOOKAHEAD(2)
      n124=Func_GetBit(prn)
      { n0 = new NodeChoice(n124, 123); }
   |
      LOOKAHEAD(2)
      n125=Func_GetByte(prn)
      { n0 = new NodeChoice(n125, 124); }
   |
      LOOKAHEAD(2)
      n126=Func_ToDate(prn)
      { n0 = new NodeChoice(n126, 125); }
   |
      LOOKAHEAD(2)
      n127=Func_ClockTimeStamp(prn)
      { n0 = new NodeChoice(n127, 126); }
   |
      LOOKAHEAD(2)
      n128=Func_StatementTimeStamp(prn)
      { n0 = new NodeChoice(n128, 127); }
   |
      LOOKAHEAD(2)
      n129=Func_TransactionTimeStamp(prn)
      { n0 = new NodeChoice(n129, 128); }
   |
      LOOKAHEAD(2)
      n130=Func_NullIf(prn)
      { n0 = new NodeChoice(n130, 129); }
   |
      LOOKAHEAD(2)
      n131=Func_SetBit(prn)
      { n0 = new NodeChoice(n131, 130); }
   |
      LOOKAHEAD(2)
      n132=Func_SetByte(prn)
      { n0 = new NodeChoice(n132, 131); }
   |
      LOOKAHEAD(2)
      n133=Func_ToChar(prn)
      { n0 = new NodeChoice(n133, 132); }
   |
      LOOKAHEAD(2)
      n134=Func_ToNumber(prn)
      { n0 = new NodeChoice(n134, 133); }
   |
      LOOKAHEAD(2)
      n135=Func_ToTimestamp(prn)
      { n0 = new NodeChoice(n135, 134); }
   |
      LOOKAHEAD(2)
      n136=Func_AddMonths(prn)
      { n0 = new NodeChoice(n136, 135); }
   |
      LOOKAHEAD(2)
      n137=Func_JustifyDays(prn)
      { n0 = new NodeChoice(n137, 136); }
   |
      LOOKAHEAD(2)
      n138=Func_JustifyHours(prn)
      { n0 = new NodeChoice(n138, 137); }
   |
      LOOKAHEAD(2)
      n139=Func_JustifyInterval(prn)
      { n0 = new NodeChoice(n139, 138); }
   |
      LOOKAHEAD(2)
      n140=Func_LastDay(prn)
      { n0 = new NodeChoice(n140, 139); }
   |
      LOOKAHEAD(2)
      n141=Func_MonthsBetween(prn)
      { n0 = new NodeChoice(n141, 140); }
   |
      LOOKAHEAD(2)
      n142=Func_NextDay(prn)
      { n0 = new NodeChoice(n142, 141); }
   |
      LOOKAHEAD(2)
      n143=Func_CurrentDatabase(prn)
      { n0 = new NodeChoice(n143, 142); }
   |
      LOOKAHEAD(2)
      n144=Func_CurrentSchema(prn)
      { n0 = new NodeChoice(n144, 143); }
   |
      LOOKAHEAD(2)
      n145=Func_SysDate(prn)
      { n0 = new NodeChoice(n145, 144); }
   |
      LOOKAHEAD(2)
      n146=Func_BitAnd(prn)
      { n0 = new NodeChoice(n146, 145); }
   |
      LOOKAHEAD(2)
      n147=Func_BitOr(prn)
      { n0 = new NodeChoice(n147, 146); }
   |
      LOOKAHEAD(2)
      n148=Func_BoolAnd(prn)
      { n0 = new NodeChoice(n148, 147); }
   |
      LOOKAHEAD(2)
      n149=Func_BoolOr(prn)
      { n0 = new NodeChoice(n149, 148); }
   |
      LOOKAHEAD(2)
      n150=Func_CorrCov(prn)
      { n0 = new NodeChoice(n150, 149); }
   |
      LOOKAHEAD(2)
      n151=Func_Regr(prn)
      { n0 = new NodeChoice(n151, 150); }
   |
      LOOKAHEAD(2)
      n152=Func_RegexReplace(prn)
      { n0 = new NodeChoice(n152, 151); }
   |
      LOOKAHEAD(2)
      n153=Func_Nvl(prn)
      { n0 = new NodeChoice(n153, 152); }
   |
      LOOKAHEAD(2)
      n154=Func_Coalesce(prn)
      { n0 = new NodeChoice(n154, 153); }
   |
      LOOKAHEAD(2)
      n155=Func_Abbrev(prn)
      { n0 = new NodeChoice(n155, 154); }
   |
      LOOKAHEAD(2)
      n156=Func_Broadcast(prn)
      { n0 = new NodeChoice(n156, 155); }
   |
      LOOKAHEAD(2)
      n157=Func_Family(prn)
      { n0 = new NodeChoice(n157, 156); }
   |
      LOOKAHEAD(2)
      n158=Func_Host(prn)
      { n0 = new NodeChoice(n158, 157); }
   |
      LOOKAHEAD(2)
      n159=Func_Hostmask(prn)
      { n0 = new NodeChoice(n159, 158); }
   |
      LOOKAHEAD(2)
      n160=Func_Masklen(prn)
      { n0 = new NodeChoice(n160, 159); }
   |
      LOOKAHEAD(2)
      n161=Func_Netmask(prn)
      { n0 = new NodeChoice(n161, 160); }
   |
      LOOKAHEAD(2)
      n162=Func_Network(prn)
      { n0 = new NodeChoice(n162, 161); }
   |
      LOOKAHEAD(2)
      n163=Func_Set_Masklen(prn)
      { n0 = new NodeChoice(n163, 162); }
   |
      LOOKAHEAD(2)
      n164=Func_Text(prn)
      { n0 = new NodeChoice(n164, 163); }
   )
   
   { return new FunctionCall(n0); }
}

Func_Cbrt Func_Cbrt(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CBRT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Cbrt(n0,n2,n4,n5); }
}

Func_GetBit Func_GetBit(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<GET_BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_GetBit(n0,n2,n4,n5,n7,n8); }
}

Func_GetByte Func_GetByte(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<GET_BYTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_GetByte(n0,n2,n4,n5,n7,n8); }
}

Func_ToDate Func_ToDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToDate(n0,n2,n4,n5,n10); }
}

Func_ClockTimeStamp Func_ClockTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CLOCK_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_ClockTimeStamp(n0,n2); }
}

Func_StatementTimeStamp Func_StatementTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<STATEMENT_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_StatementTimeStamp(n0,n2); }
}

Func_TransactionTimeStamp Func_TransactionTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<TRANSACTION_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_TransactionTimeStamp(n0,n2); }
}

Func_NullIf Func_NullIf(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<NULLIF_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_NullIf(n0,n2,n4,n5,n7,n8); }
}

Func_SetBit Func_SetBit(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SET_BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SetBit(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_SetByte Func_SetByte(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SET_BYTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SetByte(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_ToChar Func_ToChar(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_CHAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToChar(n0,n2,n4,n5,n10); }
}

Func_ToNumber Func_ToNumber(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TO_NUMBER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ToNumber(n0,n2,n4,n5,n7,n8); }
}

Func_ToTimestamp Func_ToTimestamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TO_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ToTimestamp(n0,n2,n4,n5,n7,n8); }
}

Func_AddMonths Func_AddMonths(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADD_MONTHS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddMonths(n0,n2,n4,n5,n7,n8); }
}

Func_JustifyDays Func_JustifyDays(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_DAYS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyDays(n0,n2,n4,n7,n8); }
}

Func_JustifyHours Func_JustifyHours(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_HOURS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyHours(n0,n2,n4,n7,n8); }
}

Func_JustifyInterval Func_JustifyInterval(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_INTERVAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyInterval(n0,n2,n4,n7,n8); }
}

Func_LastDay Func_LastDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LAST_DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_LastDay(n0,n2,n4,n5); }
}

Func_MonthsBetween Func_MonthsBetween(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MONTHS_BETWEEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_MonthsBetween(n0,n2,n4,n5,n7,n8); }
}

Func_NextDay Func_NextDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<NEXT_DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_NextDay(n0,n2,n4,n5,n7,n8); }
}

Func_CurrentDatabase Func_CurrentDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CURRENT_DATABASE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_CurrentDatabase(n0,n2); }
}

Func_CurrentSchema Func_CurrentSchema(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CURRENT_SCHEMA_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_CurrentSchema(n0,n2); }
}

Func_SysDate Func_SysDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SYSDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Func_SysDate(n0); }
}

Func_BitAnd Func_BitAnd(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BIT_AND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BitAnd(n0,n2,n4,n7,n8); }
}

Func_BitOr Func_BitOr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BIT_OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BitOr(n0,n2,n4,n7,n8); }
}

Func_BoolAnd Func_BoolAnd(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<BOOL_AND_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EVERY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n9=<DISTINCT_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_BoolAnd(n0,n5,n7,n10,n11); }
}

Func_BoolOr Func_BoolOr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BOOL_OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BoolOr(n0,n2,n4,n7,n8); }
}

Func_CorrCov Func_CorrCov(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<CORR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<COVAR_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<COVAR_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=SQLArgument(prn)
   n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=SQLArgument(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_CorrCov(n0,n7,n9,n10,n12,n13); }
}

Func_Regr Func_Regr(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SQLArgument n21;
   NodeToken n22;
   Token n23;
   SQLArgument n24;
   NodeToken n25;
   Token n26;

   {
   }
}
{
   (
      (
         n2=<REGR_AVGX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REGR_AVGY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<REGR_COUNT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<REGR_INTERCEPT_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<REGR_R2_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<REGR_SLOPE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<REGR_SXX_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<REGR_SXY_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<REGR_SYY_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      )
      
   )
   n20=<PARENTHESIS_START_> { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=SQLArgument(prn)
   n23="," { n22 = JTBToolkit.makeNodeToken(n23); }
   n24=SQLArgument(prn)
   n26=<PARENTHESIS_CLOSE_> { n25 = JTBToolkit.makeNodeToken(n26); }
   
   { return new Func_Regr(n0,n19,n21,n22,n24,n25); }
}

Func_RegexReplace Func_RegexReplace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<REGEXP_REPLACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_RegexReplace(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_Nvl Func_Nvl(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   SQLArgument n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeToken n21;
   Token n22;
   SQLArgument n23;
   NodeToken n24;
   Token n25;

   {
   }
}
{
   (
      { n1 = new NodeSequence(6); }
      n3=<NVL_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n6=SQLArgument(prn)
      { n1.addNode(n6); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n1.addNode(n7); }
      n9=SQLArgument(prn)
      { n1.addNode(n9); }
      n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n1.addNode(n10); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n12 = new NodeSequence(8); }
      n14=<NVL2_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n16=<PARENTHESIS_START_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n12.addNode(n15); }
      n17=SQLArgument(prn)
      { n12.addNode(n17); }
      n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
      { n12.addNode(n18); }
      n20=SQLArgument(prn)
      { n12.addNode(n20); }
      n22="," { n21 = JTBToolkit.makeNodeToken(n22); }
      { n12.addNode(n21); }
      n23=SQLArgument(prn)
      { n12.addNode(n23); }
      n25=<PARENTHESIS_CLOSE_> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n12.addNode(n24); }
      { n0 = new NodeChoice(n12, 1); }
   )
   
   { return new Func_Nvl(n0); }
}

Func_Coalesce Func_Coalesce(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COALESCE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Coalesce(n0,n2,n4,n5); }
}

Func_Random Func_Random(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<RANDOM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Random(n0,n2,n4); }
}

Func_Setseed Func_Setseed(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SETSEED_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Setseed(n0,n2,n4,n5); }
}

Func_Width_bucket Func_Width_bucket(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<WIDTH_BUCKET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Func_Width_bucket(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14); }
}

Func_Btrim Func_Btrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<BTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Btrim(n0,n2,n4,n5,n10); }
}

Func_Decode Func_Decode(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<DECODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Decode(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Encode Func_Encode(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ENCODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Encode(n0,n2,n4,n5,n7,n8); }
}

Func_Repeat Func_Repeat(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<REPEAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Repeat(n0,n2,n4,n5,n7,n8); }
}

Func_SplitPart Func_SplitPart(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SPLIT_PART_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SplitPart(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_StrPos Func_StrPos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<STRPOS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_StrPos(n0,n2,n4,n5,n7,n8); }
}

Func_ToAscii Func_ToAscii(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_ASCII_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToAscii(n0,n2,n4,n5,n10); }
}

Func_Translate Func_Translate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<TRANSLATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_Translate(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_PgClientEncoding Func_PgClientEncoding(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PG_CLIENT_ENCODING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_PgClientEncoding(n0,n2,n4); }
}

Func_Chr Func_Chr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CHR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Chr(n0,n2,n4,n5); }
}

Func_Md5 Func_Md5(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MD5_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Md5(n0,n2,n4,n5); }
}

Func_QuoteIdent Func_QuoteIdent(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<QUOTE_IDENT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_QuoteIdent(n0,n2,n4,n5); }
}

Func_QuoteLiteral Func_QuoteLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<QUOTE_LITERAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_QuoteLiteral(n0,n2,n4,n5); }
}

Func_ToHex Func_ToHex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TO_HEX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ToHex(n0,n2,n4,n5); }
}

Func_Substring Func_Substring(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   n1=<SUBSTRING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<FROM_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      { n11 = new NodeSequence(2); }
      n13=<FOR_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=SQLArgument(prn)
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_Substring(n0,n2,n4,n5,n10,n15); }
}

Func_Position Func_Position(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<POSITION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<IN_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Position(n0,n2,n4,n5,n7,n8); }
}

Func_Overlay Func_Overlay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<OVERLAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PLACING_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<FROM_> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14=<FOR_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_Overlay(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_OctetLength Func_OctetLength(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<OCTET_LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_OctetLength(n0,n2,n4,n5); }
}

Func_Convert Func_Convert(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;

   {
   }
}
{
   n1=<CONVERT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      (
         n7=<USING_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      (
         n12=<STRING_LITERAL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10 = new NodeChoice(n11, 0); }
      |
         n13=Identifier(prn)
         { n10 = new NodeChoice(n13, 1); }
      )
      
   )
   (
      { n15 = new NodeSequence(2); }
      n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         (
            n20=<STRING_LITERAL> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18 = new NodeChoice(n19, 0); }
         |
            n21=Identifier(prn)
            { n18 = new NodeChoice(n21, 1); }
         )
         
      )
      { n15.addNode(n18); }
      { n14.addNode(n15); }
   )?
   n23=<PARENTHESIS_CLOSE_> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new Func_Convert(n0,n2,n4,n5,n10,n14,n22); }
}

Func_CharLength Func_CharLength(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<CHAR_LENGTH_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHARACTER_LENGTH_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_CharLength(n0,n5,n7,n8); }
}

Func_BitLength Func_BitLength(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<BIT_LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_BitLength(n0,n2,n4,n5); }
}

Func_LocalTime Func_LocalTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<LOCALTIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_LocalTime(n0,n2); }
}

Func_LocalTimeStamp Func_LocalTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<LOCALTIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_LocalTimeStamp(n0,n2); }
}

Func_Age Func_Age(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<AGE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Age(n0,n2,n4,n5,n10); }
}

Func_DatePart Func_DatePart(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATEPART_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DatePart(n0,n2,n4,n5,n7,n8); }
}

Func_DateTrunc Func_DateTrunc(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATETRUNC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DateTrunc(n0,n2,n4,n5,n7,n8); }
}

Func_Extract Func_Extract(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   SQLArgument n37;
   NodeToken n38;
   Token n39;

   {
   }
}
{
   n1=<EXTRACT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<YEAR_FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<QUARTER_FROM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      |
         n10=<MONTH_FROM> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4 = new NodeChoice(n9, 2); }
      |
         n12=<WEEK_FROM> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n4 = new NodeChoice(n11, 3); }
      |
         n14=<DAY_FROM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n4 = new NodeChoice(n13, 4); }
      |
         n16=<HOUR_FROM> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n4 = new NodeChoice(n15, 5); }
      |
         n18=<MINUTE_FROM> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n4 = new NodeChoice(n17, 6); }
      |
         n20=<SECOND_FROM> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n4 = new NodeChoice(n19, 7); }
      |
         n22=<DOY_FROM> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n4 = new NodeChoice(n21, 8); }
      |
         n24=<DOW_FROM> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n4 = new NodeChoice(n23, 9); }
      |
         n26=<DECADE_FROM> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n4 = new NodeChoice(n25, 10); }
      |
         n28=<CENTURY_FROM> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n4 = new NodeChoice(n27, 11); }
      |
         n30=<MILLISECOND_FROM> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n4 = new NodeChoice(n29, 12); }
      |
         n32=<MILLENNIUM_FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n4 = new NodeChoice(n31, 13); }
      |
         n34=<MICROSECONDS_FROM> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n4 = new NodeChoice(n33, 14); }
      |
         n36=<EPOCH_FROM> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n4 = new NodeChoice(n35, 15); }
      )
      
   )
   n37=SQLArgument(prn)
   n39=<PARENTHESIS_CLOSE_> { n38 = JTBToolkit.makeNodeToken(n39); }
   
   { return new Func_Extract(n0,n2,n4,n37,n38); }
}

Func_IsFinite Func_IsFinite(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ISFINITE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_IsFinite(n0,n2,n4,n5); }
}

Func_TimeOfDay Func_TimeOfDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<TIMEOFDAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_TimeOfDay(n0,n2,n4); }
}

Func_User Func_User(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   (
      (
         n2=<USER_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CURRENT_USER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      { n6 = new NodeSequence(2); }
      n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<PARENTHESIS_CLOSE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
   { return new Func_User(n0,n5); }
}

Func_Custom Func_Custom(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgumentList n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=SQLArgumentList(prn)
      { n4.addNode(n5); }
   )?
   n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Func_Custom(n0,n2,n4,n6); }
}

Func_Concat Func_Concat(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<CONCAT_WORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Concat(n0,n2,n4,n5,n7,n8); }
}

Func_Case Func_Case(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLSimpleExpression n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLSimpleExpression n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   SQLComplexExpression n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   SQLSimpleExpression n35;
   NodeToken n36;
   Token n37;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(6); }
      n3=<CASE_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SQLSimpleExpression(prn)
      { n1.addNode(n4); }
      (
         { n6 = new NodeSequence(4); }
         n8=<WHEN_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SQLSimpleExpression(prn)
         { n6.addNode(n9); }
         n11=<THEN_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         n12=SQLSimpleExpression(prn)
         { n6.addNode(n12); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n1.addNode(n5); }
      (
         { n14 = new NodeSequence(2); }
         n16=<ELSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=SQLSimpleExpression(prn)
         { n14.addNode(n17); }
         { n13.addNode(n14); }
      )?
      { n1.addNode(n13); }
      n19=<END_> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n1.addNode(n18); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n20 = new NodeSequence(4); }
      n22=<CASE_> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      (
         { n24 = new NodeSequence(4); }
         n26=<WHEN_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         n27=SQLComplexExpression(prn)
         { n24.addNode(n27); }
         n29=<THEN_> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n24.addNode(n28); }
         n30=SQLSimpleExpression(prn)
         { n24.addNode(n30); }
         { n23.addNode(n24); }
      )*
      { n23.nodes.trimToSize(); }
      { n20.addNode(n23); }
      (
         { n32 = new NodeSequence(2); }
         n34=<ELSE_> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
         n35=SQLSimpleExpression(prn)
         { n32.addNode(n35); }
         { n31.addNode(n32); }
      )?
      { n20.addNode(n31); }
      n37=<END_> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n20.addNode(n36); }
      { n0 = new NodeChoice(n20, 1); }
   )
   
   { return new Func_Case(n0); }
}

Func_Abs Func_Abs(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ABS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Abs(n0,n2,n4,n5); }
}

Func_Ceil Func_Ceil(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CEIL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ceil(n0,n2,n4,n5); }
}

Func_Ceiling Func_Ceiling(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CEILING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ceiling(n0,n2,n4,n5); }
}

Func_Exp Func_Exp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<EXP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Exp(n0,n2,n4,n5); }
}

Func_Floor Func_Floor(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<FLOOR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Floor(n0,n2,n4,n5); }
}

Func_LN Func_LN(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_LN(n0,n2,n4,n5); }
}

Func_Log Func_Log(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<LOG_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Log(n0,n2,n4,n5,n10); }
}

Func_Log10 Func_Log10(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LOG10_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Log10(n0,n2,n4,n5); }
}

Func_PI Func_PI(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PI_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_PI(n0,n2,n4); }
}

Func_Power Func_Power(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<POWER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Power(n0,n2,n4,n5,n7,n8); }
}

Func_Sign Func_Sign(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SIGN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sign(n0,n2,n4,n5); }
}

Func_TAsin Func_TAsin(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ASIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TAsin(n0,n2,n4,n5); }
}

Func_TATan2 Func_TATan2(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ATAN2_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_TATan2(n0,n2,n4,n5,n7,n8); }
}

Func_TATn2 Func_TATn2(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ATN2_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_TATn2(n0,n2,n4,n5,n7,n8); }
}

Func_TAtan Func_TAtan(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ATAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TAtan(n0,n2,n4,n5); }
}

Func_TCos Func_TCos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCos(n0,n2,n4,n5); }
}

Func_TCosh Func_TCosh(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COSH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCosh(n0,n2,n4,n5); }
}

Func_TCot Func_TCot(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCot(n0,n2,n4,n5); }
}

Func_TACos Func_TACos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ACOS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TACos(n0,n2,n4,n5); }
}

Func_TDegree Func_TDegree(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DEGREE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TDegree(n0,n2,n4,n5); }
}

Func_Radians Func_Radians(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<RADIANS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Radians(n0,n2,n4,n5); }
}

Func_Sin Func_Sin(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sin(n0,n2,n4,n5); }
}

Func_Tan Func_Tan(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Tan(n0,n2,n4,n5); }
}

Func_Round Func_Round(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ROUND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Round(n0,n2,n4,n5,n10); }
}

Func_Mod Func_Mod(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<MOD_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MODULE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_Mod(n0,n5,n7,n8,n10,n11); }
}

Func_Float Func_Float(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<FLOAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Float(n0,n2,n4,n5,n7,n8); }
}

Func_Greatest Func_Greatest(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<GREATEST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Greatest(n0,n2,n4,n5); }
}

Func_Sqrt Func_Sqrt(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SQRT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sqrt(n0,n2,n4,n5); }
}

Func_Least Func_Least(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LEAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Least(n0,n2,n4,n5); }
}

Func_Ascii Func_Ascii(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ASCII_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ascii(n0,n2,n4,n5); }
}

Func_Index Func_Index(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeToken n21;
   Token n22;

   {
   }
}
{
   (
      (
         n2=<INDEX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INSTR_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   (
      { n17 = new NodeSequence(2); }
      n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20=SQLArgument(prn)
      { n17.addNode(n20); }
      { n16.addNode(n17); }
   )?
   n22=<PARENTHESIS_CLOSE_> { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new Func_Index(n0,n5,n7,n8,n10,n11,n16,n21); }
}

Func_Left Func_Left(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<LEFT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Left(n0,n2,n4,n5,n7,n8); }
}

Func_Right Func_Right(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<RIGHT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Right(n0,n2,n4,n5,n7,n8); }
}

Func_Length Func_Length(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Length(n0,n2,n4,n5); }
}

Func_Lower Func_Lower(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LOWER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Lower(n0,n2,n4,n5); }
}

Func_Lpad Func_Lpad(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<LPAD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Lpad(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Ltrim Func_Ltrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<LTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Ltrim(n0,n2,n4,n5,n10); }
}

Func_Replace Func_Replace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<REPLACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Replace(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Trunc Func_Trunc(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TRUNC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Trunc(n0,n2,n4,n5,n10); }
}

Func_Trim Func_Trim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SQLArgument n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<TRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<BOTH> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<LEADING> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      |
         n10=<TRAILING> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4 = new NodeChoice(n9, 2); }
      )
      
   )
   (
      n12=SQLArgument(prn)
      { n11.addNode(n12); }
   )?
   n14=<FROM_> { n13 = JTBToolkit.makeNodeToken(n14); }
   n15=SQLArgument(prn)
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_Trim(n0,n2,n4,n11,n13,n15,n16); }
}

Func_Rpad Func_Rpad(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<RPAD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Rpad(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Rtrim Func_Rtrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<RTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Rtrim(n0,n2,n4,n5,n10); }
}

Func_SubStr Func_SubStr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<SUBSTR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_SubStr(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Database Func_Database(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<DATABASE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Database(n0,n2,n4); }
}

Func_Version Func_Version(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<VERSION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Version(n0,n2,n4); }
}

Func_Value Func_Value(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<VALUE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      LOOKAHEAD(2)
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Value(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Avg Func_Avg(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<AVERAGE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Avg(n0,n2,n4,n7,n8); }
}

Func_Count Func_Count(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   n1=<COUNT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<STAR_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         { n7 = new NodeSequence(2); }
         (
            (
               n11=<DISTINCT_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               n13=<ALL_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n9 = new NodeChoice(n12, 1); }
            )
            { n8.addNode(n9); }
         )?
         { n7.addNode(n8); }
         n14=SQLArgument(prn)
         { n7.addNode(n14); }
         { n4 = new NodeChoice(n7, 1); }
      )
      
   )
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_Count(n0,n2,n4,n15); }
}

Func_Max Func_Max(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MAX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Max(n0,n2,n4,n7,n8); }
}

Func_Min Func_Min(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Min(n0,n2,n4,n7,n8); }
}

Func_Stdev Func_Stdev(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<STDDEV_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<STDDEV_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<STDDEV_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n11=<DISTINCT_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   n12=SQLArgument(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Stdev(n0,n7,n9,n12,n13); }
}

Func_Variance Func_Variance(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<VARIANCE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<VARIANCE_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<VARIANCE_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n11=<DISTINCT_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   n12=SQLArgument(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Variance(n0,n7,n9,n12,n13); }
}

Func_Sum Func_Sum(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Sum(n0,n2,n4,n7,n8); }
}

Func_Upper Func_Upper(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<UPPER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Upper(n0,n2,n4,n5); }
}

Func_Abbrev Func_Abbrev(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ABBREV_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Abbrev(n0,n2,n4,n5); }
}

Func_Broadcast Func_Broadcast(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<BROADCAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Broadcast(n0,n2,n4,n5); }
}

Func_Family Func_Family(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<FAMILY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Family(n0,n2,n4,n5); }
}

Func_Host Func_Host(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Host(n0,n2,n4,n5); }
}

Func_Hostmask Func_Hostmask(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOSTMASK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Hostmask(n0,n2,n4,n5); }
}

Func_Masklen Func_Masklen(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MASKLEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Masklen(n0,n2,n4,n5); }
}

Func_Netmask Func_Netmask(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NETMASK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Netmask(n0,n2,n4,n5); }
}

Func_Network Func_Network(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NETWORK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Network(n0,n2,n4,n5); }
}

Func_Set_Masklen Func_Set_Masklen(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SET_MASKLEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Set_Masklen(n0,n2,n4,n5,n7,n8); }
}

Func_Text Func_Text(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Text(n0,n2,n4,n5); }
}

length length(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new length(n0); }
}

position position(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new position(n0); }
}

TableColumn TableColumn(PrintStream prn) :
{
   extendbObject n0;

   {
   }
}
{
   n0=extendbObject(prn)
   
   { return new TableColumn(n0); }
}

extendbObject extendbObject(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   Identifier n6;

   {
   }
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(4); }
         n2=TableName(prn)
         { n1.addNode(n2); }
         n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
         { n1.addNode(n3); }
         n5=Identifier(prn)
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n6=Identifier(prn)
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   
   { return new extendbObject(n0); }
}

SelectAliasSpec SelectAliasSpec(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   AliasName n3;

   {
   }
}
{
   (
      n2=<AS_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=AliasName(prn)
   
   { return new SelectAliasSpec(n0,n3); }
}

AliasName AliasName(PrintStream prn) :
{
   Identifier n0;

   {
   }
}
{
   n0=Identifier(prn)
   
   { return new AliasName(n0); }
}

SQLComplexExpression SQLComplexExpression(PrintStream prn) :
{
   SQLAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLORExpression n2;

   {
   }
}
{
   n0=SQLAndExpression(prn)
   (
      n2=SQLORExpression(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLComplexExpression(n0,n1); }
}

SQLAndExpression SQLAndExpression(PrintStream prn) :
{
   SQLUnaryLogicalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   SQLAndExp n5;

   {
      Token t;
   }
}
{
   n0=SQLUnaryLogicalExpression(prn)
   (
      LOOKAHEAD(2)
      n3=<LEFTOUTER_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      n5=SQLAndExp(prn)
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new SQLAndExpression(n0,n1,n4); }
}

SQLORExpression SQLORExpression(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLAndExpression n2;

   {
   }
}
{
   n1=<OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLAndExpression(prn)
   
   { return new SQLORExpression(n0,n2); }
}

SQLAndExp SQLAndExp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLUnaryLogicalExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<AND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLUnaryLogicalExpression(prn)
   (
      LOOKAHEAD(2)
      n5=<LEFTOUTER_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new SQLAndExp(n0,n2,n3); }
}

SQLUnaryLogicalExpression SQLUnaryLogicalExpression(PrintStream prn) :
{
   NodeChoice n0;
   ExistsClause n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   SQLCondResult n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   SQLRelationalExpression n11;

   {
   }
}
{
   (
      (
         LOOKAHEAD(2)
         n1=ExistsClause(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(2)
         { n2 = new NodeSequence(3); }
         (
            n5=<NOT_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n6=SQLCondResult(prn)
         { n2.addNode(n6); }
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(2)
         { n7 = new NodeSequence(3); }
         (
            n10=<NOT_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
         )?
         { n7.addNode(n8); }
         n11=SQLRelationalExpression(prn)
         { n7.addNode(n11); }
         { n0 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new SQLUnaryLogicalExpression(n0); }
}

SQLCondResult SQLCondResult(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<TRUE_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new SQLCondResult(n0); }
}

ExistsClause ExistsClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SubQuery n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4="EXISTS" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SubQuery(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new ExistsClause(n0,n3,n5,n7,n8); }
}

SQLRelationalExpression SQLRelationalExpression(PrintStream prn) :
{
   NodeChoice n0;
   SQLExpressionList n1;
   SQLSimpleExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   SQLRelationalOperatorExpression n5;
   NodeChoice n6;
   SQLInClause n7;
   SQLBetweenClause n8;
   SQLLikeClause n9;
   IsNullClause n10;
   IsBooleanClause n11;

   {
   }
}
{
   (
      (
         LOOKAHEAD(<PARENTHESIS_START_> SQLSimpleExpression(prn) ",")
         n1=SQLExpressionList(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=SQLSimpleExpression(prn)
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      (
         LOOKAHEAD(2)
         n5=SQLRelationalOperatorExpression(prn)
         { n4 = new NodeChoice(n5, 0); }
      |
         (
            (
               LOOKAHEAD(2)
               n7=SQLInClause(prn)
               { n6 = new NodeChoice(n7, 0); }
            |
               LOOKAHEAD(2)
               n8=SQLBetweenClause(prn)
               { n6 = new NodeChoice(n8, 1); }
            |
               LOOKAHEAD(2)
               n9=SQLLikeClause(prn)
               { n6 = new NodeChoice(n9, 2); }
            )
            
         )
         { n4 = new NodeChoice(n6, 1); }
      |
         LOOKAHEAD(3)
         n10=IsNullClause(prn)
         { n4 = new NodeChoice(n10, 2); }
      |
         n11=IsBooleanClause(prn)
         { n4 = new NodeChoice(n11, 3); }
      )
      { n3.addNode(n4); }
   )?
   
   { return new SQLRelationalExpression(n0,n3); }
}

SQLRelationalOperatorExpression SQLRelationalOperatorExpression(PrintStream prn) :
{
   Relop n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SubQuery n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   SQLExpressionList n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;

   {
   }
}
{
   n0=Relop(prn)
   (
      (
         LOOKAHEAD("ANY" | "ALL" | "SOME")
         { n2 = new NodeSequence(3); }
         (
            (
               n6="ALL" { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4 = new NodeChoice(n5, 0); }
            |
               n8="ANY" { n7 = JTBToolkit.makeNodeToken(n8); }
               { n4 = new NodeChoice(n7, 1); }
            |
               n10="SOME" { n9 = JTBToolkit.makeNodeToken(n10); }
               { n4 = new NodeChoice(n9, 2); }
            )
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         (
            (
               LOOKAHEAD(<PARENTHESIS_START_> SubQuery(prn))
               { n12 = new NodeSequence(4); }
               n14=<PARENTHESIS_START_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n15=SubQuery(prn)
               { n12.addNode(n15); }
               n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n12.addNode(n16); }
               { n11 = new NodeChoice(n12, 0); }
            |
               { n18 = new NodeSequence(3); }
               n20=<PARENTHESIS_START_> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
               n21=SQLExpressionList(prn)
               { n18.addNode(n21); }
               n23=<PARENTHESIS_CLOSE_> { n22 = JTBToolkit.makeNodeToken(n23); }
               { n18.addNode(n22); }
               { n11 = new NodeChoice(n18, 1); }
            )
            
         )
         { n2.addNode(n11); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n24=SQLSimpleExpression(prn)
         { n1 = new NodeChoice(n24, 1); }
      )
      
   )
   
   { return new SQLRelationalOperatorExpression(n0,n1); }
}

Relop Relop(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      (
         n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="!=" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="#" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="<>" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=">" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=">=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14="<" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16="<=" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      )
      
   )
   
   { return new Relop(n0); }
}

SQLInClause SQLInClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SubQuery n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   SQLExpressionList n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<IN_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         LOOKAHEAD(<PARENTHESIS_START_> SubQuery(prn))
         { n6 = new NodeSequence(3); }
         n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SubQuery(prn)
         { n6.addNode(n9); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n10 = new NodeSequence(2); }
         n12=<PARENTHESIS_START_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=SQLExpressionList(prn)
         { n10.addNode(n13); }
         { n5 = new NodeChoice(n10, 1); }
      )
      
   )
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new SQLInClause(n0,n3,n5,n14); }
}

SQLBetweenClause SQLBetweenClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<BETWEEN_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SQLSimpleExpression(prn)
   n7="AND" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SQLSimpleExpression(prn)
   
   { return new SQLBetweenClause(n0,n3,n5,n6,n8); }
}

SQLLikeClause SQLLikeClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(4); }
         (
            n4=<NOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2.addNode(n3); }
         )?
         { n1.addNode(n2); }
         (
            (
               n7=<LIKE_> { n6 = JTBToolkit.makeNodeToken(n7); }
               { n5 = new NodeChoice(n6, 0); }
            |
               n9=<ILIKE_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n5 = new NodeChoice(n8, 1); }
            |
               n11=<SIMILAR_TO_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n5 = new NodeChoice(n10, 2); }
            )
            
         )
         { n1.addNode(n5); }
         n12=SQLSimpleExpression(prn)
         { n1.addNode(n12); }
         (
            { n14 = new NodeSequence(2); }
            n16=<ESCAPE_> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n17=SQLSimpleExpression(prn)
            { n14.addNode(n17); }
            { n13.addNode(n14); }
         )?
         { n1.addNode(n13); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n18 = new NodeSequence(2); }
         (
            (
               n21=<NOT_BITWISE_> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n19 = new NodeChoice(n20, 0); }
            |
               n23=<REGEX_NOT_MATCHES_> { n22 = JTBToolkit.makeNodeToken(n23); }
               { n19 = new NodeChoice(n22, 1); }
            |
               n25=<REGEX_MATCHES_CASE_INSTV_> { n24 = JTBToolkit.makeNodeToken(n25); }
               { n19 = new NodeChoice(n24, 2); }
            |
               n27=<REGEX_NOT_MATCHES_CASE_INSTV_> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n19 = new NodeChoice(n26, 3); }
            |
               n29=<OVERLAPS_> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n19 = new NodeChoice(n28, 4); }
            )
            
         )
         { n18.addNode(n19); }
         n30=SQLSimpleExpression(prn)
         { n18.addNode(n30); }
         { n0 = new NodeChoice(n18, 1); }
      )
      
   )
   
   { return new SQLLikeClause(n0); }
}

SubQuery SubQuery(PrintStream prn) :
{
   SelectWithoutOrder n0;

   {
   }
}
{
   n0=SelectWithoutOrder(prn)
   
   { return new SubQuery(n0); }
}

IsNullClause IsNullClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3="IS" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8="=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n10="!=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   n12="NULL" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new IsNullClause(n0,n11); }
}

IsBooleanClause IsBooleanClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3="IS" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8="=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n10="!=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   (
      (
         n13="TRUE" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11 = new NodeChoice(n12, 0); }
      |
         n15="FALSE" { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11 = new NodeChoice(n14, 1); }
      )
      
   )
   
   { return new IsBooleanClause(n0,n11); }
}

IntoClause IntoClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   TableName n11;

   {
   }
}
{
   n1=<INTO_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<TEMPORARY_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<TEMP_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      n10=<TABLE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=TableName(prn)
   
   { return new IntoClause(n0,n2,n8,n11); }
}

FromClause FromClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableList n2;

   {
   }
}
{
   n1=<FROM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableList(prn)
   
   { return new FromClause(n0,n2); }
}

TableSpec TableSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeOptional n3 = new NodeOptional();
   SelectAliasSpec n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   SelectWithoutOrder n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=TableName(prn)
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         n4=SelectAliasSpec(prn)
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(5); }
      n7=<PARENTHESIS_START_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=SelectWithoutOrder(prn)
      { n5.addNode(n8); }
      n10=<PARENTHESIS_CLOSE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      (
         LOOKAHEAD(2)
         n12=SelectAliasSpec(prn)
         { n11.addNode(n12); }
      )?
      { n5.addNode(n11); }
      (
         { n14 = new NodeSequence(3); }
         n16=<PARENTHESIS_START_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=ColumnNameList(prn)
         { n14.addNode(n17); }
         n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n14.addNode(n18); }
         { n13.addNode(n14); }
      )?
      { n5.addNode(n13); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new TableSpec(n0); }
}

TableList TableList(PrintStream prn) :
{
   FromTableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   FromTableSpec n5;

   {
   }
}
{
   n0=FromTableSpec(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=FromTableSpec(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TableList(n0,n1); }
}

FromTableSpec FromTableSpec(PrintStream prn) :
{
   TableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   TableSpec n8;
   NodeChoice n9;
   NodeSequence n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   TableSpec n16;
   JoinSpec n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   TableSpec n31;
   JoinSpec n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeChoice n36;
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   TableSpec n43;
   NodeSequence n44;
   NodeChoice n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   TableSpec n57;

   {
   }
}
{
   n0=TableSpec(prn)
   (
      { n11 = new NodeOptional(); }
      { n26 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n52 = new NodeOptional(); }
      (
         { n3 = new NodeSequence(3); }
         n5=<CROSS_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<JOIN_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         n8=TableSpec(prn)
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         (
            (
               { n10 = new NodeSequence(4); }
               (
                  n13=<INNER_> { n12 = JTBToolkit.makeNodeToken(n13); }
                  { n11.addNode(n12); }
               )?
               { n10.addNode(n11); }
               n15=<JOIN_> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n10.addNode(n14); }
               n16=TableSpec(prn)
               { n10.addNode(n16); }
               n17=JoinSpec(prn)
               { n10.addNode(n17); }
               { n9 = new NodeChoice(n10, 0); }
            |
               { n18 = new NodeSequence(5); }
               (
                  (
                     n21=<LEFT_> { n20 = JTBToolkit.makeNodeToken(n21); }
                     { n19 = new NodeChoice(n20, 0); }
                  |
                     n23=<RIGHT_> { n22 = JTBToolkit.makeNodeToken(n23); }
                     { n19 = new NodeChoice(n22, 1); }
                  |
                     n25=<FULL_> { n24 = JTBToolkit.makeNodeToken(n25); }
                     { n19 = new NodeChoice(n24, 2); }
                  )
                  
               )
               { n18.addNode(n19); }
               (
                  n28=<OUTER_> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
               )?
               { n18.addNode(n26); }
               n30=<JOIN_> { n29 = JTBToolkit.makeNodeToken(n30); }
               { n18.addNode(n29); }
               n31=TableSpec(prn)
               { n18.addNode(n31); }
               n32=JoinSpec(prn)
               { n18.addNode(n32); }
               { n9 = new NodeChoice(n18, 1); }
            )
            
         )
         { n2 = new NodeChoice(n9, 1); }
      |
         { n33 = new NodeSequence(2); }
         n35=<NATURAL_> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         (
            (
               { n37 = new NodeSequence(3); }
               (
                  n40=<INNER_> { n39 = JTBToolkit.makeNodeToken(n40); }
                  { n38.addNode(n39); }
               )?
               { n37.addNode(n38); }
               n42=<JOIN_> { n41 = JTBToolkit.makeNodeToken(n42); }
               { n37.addNode(n41); }
               n43=TableSpec(prn)
               { n37.addNode(n43); }
               { n36 = new NodeChoice(n37, 0); }
            |
               { n44 = new NodeSequence(4); }
               (
                  (
                     n47=<LEFT_> { n46 = JTBToolkit.makeNodeToken(n47); }
                     { n45 = new NodeChoice(n46, 0); }
                  |
                     n49=<RIGHT_> { n48 = JTBToolkit.makeNodeToken(n49); }
                     { n45 = new NodeChoice(n48, 1); }
                  |
                     n51=<FULL_> { n50 = JTBToolkit.makeNodeToken(n51); }
                     { n45 = new NodeChoice(n50, 2); }
                  )
                  
               )
               { n44.addNode(n45); }
               (
                  n54=<OUTER_> { n53 = JTBToolkit.makeNodeToken(n54); }
                  { n52.addNode(n53); }
               )?
               { n44.addNode(n52); }
               n56=<JOIN_> { n55 = JTBToolkit.makeNodeToken(n56); }
               { n44.addNode(n55); }
               n57=TableSpec(prn)
               { n44.addNode(n57); }
               { n36 = new NodeChoice(n44, 1); }
            )
            
         )
         { n33.addNode(n36); }
         { n2 = new NodeChoice(n33, 2); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FromTableSpec(n0,n1); }
}

JoinSpec JoinSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLComplexExpression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      n3="ON" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SQLComplexExpression(prn)
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(4); }
      n7=<USING_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n10=ColumnNameList(prn)
      { n5.addNode(n10); }
      n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n5.addNode(n11); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new JoinSpec(n0); }
}

WhereClause WhereClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
}
{
   n1=<WHERE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLComplexExpression(prn)
   
   { return new WhereClause(n0,n2); }
}

GroupByClause GroupByClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLExpressionList n2;

   {
   }
}
{
   n1=<GROUP_BY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLExpressionList(prn)
   
   { return new GroupByClause(n0,n2); }
}

SQLExpressionList SQLExpressionList(PrintStream prn) :
{
   SQLExpressionListItem n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLExpressionListItem n5;

   {
   }
}
{
   n0=SQLExpressionListItem(prn)
   (
      LOOKAHEAD("," SQLExpressionListItem(prn))
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLExpressionListItem(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLExpressionList(n0,n1); }
}

SQLExpressionListItem SQLExpressionListItem(PrintStream prn) :
{
   SQLSimpleExpression n0;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   
   { return new SQLExpressionListItem(n0); }
}

HavingClause HavingClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
}
{
   n1="HAVING" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLComplexExpression(prn)
   
   { return new HavingClause(n0,n2); }
}

OrderByClause OrderByClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   OrderByItem n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   OrderByItem n7;

   {
   }
}
{
   n1=<ORDER_BY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OrderByItem(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=OrderByItem(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new OrderByClause(n0,n2,n3); }
}

LimitClause LimitClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LIMIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<INT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<ALL_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new LimitClause(n0,n2); }
}

OffsetClause OffsetClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1=<OFFSET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new OffsetClause(n0,n2); }
}

OrderByItem OrderByItem(PrintStream prn) :
{
   SQLSimpleExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   (
      (
         n4="ASC" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6="DESC" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new OrderByItem(n0,n1); }
}

Func_AddDate Func_AddDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADDDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddDate(n0,n2,n4,n5,n7,n8); }
}

Func_AddTime Func_AddTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADDTIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddTime(n0,n2,n4,n5,n7,n8); }
}

Func_Date Func_Date(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Date(n0,n2,n4,n5); }
}

Func_DateDiff Func_DateDiff(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATEDIFF_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DateDiff(n0,n2,n4,n5,n7,n8); }
}

Func_Day Func_Day(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Day(n0,n2,n4,n5); }
}

Func_DayName Func_DayName(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYNAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayName(n0,n2,n4,n5); }
}

Func_DayOfMonth Func_DayOfMonth(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFMONTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfMonth(n0,n2,n4,n5); }
}

Func_DayOfWeek Func_DayOfWeek(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFWEEK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfWeek(n0,n2,n4,n5); }
}

Func_DayOfYear Func_DayOfYear(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFYEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfYear(n0,n2,n4,n5); }
}

Func_MonthName Func_MonthName(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MONTHNAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_MonthName(n0,n2,n4,n5); }
}

Func_SubDate Func_SubDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SUBDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_SubDate(n0,n2,n4,n5,n7,n8); }
}

Func_SubTime Func_SubTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1="SUBTIME" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_SubTime(n0,n2,n4,n5,n7,n8); }
}

Func_Time Func_Time(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Time(n0,n2,n4,n5); }
}

Func_CurrentDate Func_CurrentDate(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<CURDATE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DATE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Func_CurrentDate(n0,n5,n7); }
}

Func_PgCurrentDate Func_PgCurrentDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CURRENTDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Func_PgCurrentDate(n0); }
}

Func_PgCurrentTime Func_PgCurrentTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<CURRENT_TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_PgCurrentTime(n0,n2); }
}

Func_CurrentTime Func_CurrentTime(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<CURTIME_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<TIME_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Func_CurrentTime(n0,n5,n7); }
}

Func_PgCurrentTimeStamp Func_PgCurrentTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<CURRENT_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_PgCurrentTimeStamp(n0,n2); }
}

Func_Year Func_Year(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<YEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Year(n0,n2,n4,n5); }
}

Func_Month Func_Month(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MONTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Month(n0,n2,n4,n5); }
}

Func_Minute Func_Minute(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MINUTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Minute(n0,n2,n4,n5); }
}

Func_Hour Func_Hour(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOUR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Hour(n0,n2,n4,n5); }
}

Func_Second Func_Second(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SECOND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Second(n0,n2,n4,n5); }
}

Func_TimeStamp Func_TimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgument n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=SQLArgument(prn)
      { n4.addNode(n5); }
   )?
   n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Func_TimeStamp(n0,n2,n4,n6); }
}

Func_WeekOfYear Func_WeekOfYear(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<WEEKOFYEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_WeekOfYear(n0,n2,n4,n5); }
}

Func_Now Func_Now(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<NOW_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Now(n0,n2,n4); }
}

Func_SoundEx Func_SoundEx(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SOUNDEX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_SoundEx(n0,n2,n4,n5); }
}

Func_InitCap Func_InitCap(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<INITCAP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_InitCap(n0,n2,n4,n5); }
}

Func_LFill Func_LFill(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<LFILL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_LFill(n0,n2,n4,n5,n7,n8,n13); }
}

Func_MapChar Func_MapChar(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<MAPCHAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      LOOKAHEAD(2)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<INT_LITERAL> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD(2)
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Identifier(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_MapChar(n0,n2,n4,n5,n11,n16); }
}

Func_NUM Func_NUM(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_NUM(n0,n2,n4,n5); }
}

Func_Cast Func_Cast(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   types n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<CAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<AS_> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=types()
         { n7 = new NodeChoice(n8, 0); }
      |
         n10=<NULL_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_Cast(n0,n2,n4,n5,n7,n11); }
}

ColumnNameList ColumnNameList(PrintStream prn) :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n0=Identifier(prn)
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Identifier(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ColumnNameList(n0,n1); }
}

TableName TableName(PrintStream prn) :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Identifier n13;

   {
   }
}
{
   (
      (
         n1=Identifier(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(2); }
         n4=<TEMPDOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=Identifier(prn)
         { n2.addNode(n5); }
         { n0 = new NodeChoice(n2, 1); }
      |
         { n6 = new NodeSequence(2); }
         n8=<PUBLICDOT_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n0 = new NodeChoice(n6, 2); }
      |
         { n10 = new NodeSequence(2); }
         n12=<QPUBLICDOT_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=Identifier(prn)
         { n10.addNode(n13); }
         { n0 = new NodeChoice(n10, 3); }
      )
      
   )
   
   { return new TableName(n0); }
}

FloatingPointNumber FloatingPointNumber(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      n2=<DECIMAL_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<SCIENTIFIC_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new FloatingPointNumber(n0); }
}

ShowDatabases ShowDatabases() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_DATABASES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowDatabases(n0); }
}

ShowAgents ShowAgents() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_AGENTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowAgents(n0); }
}

ShowStatements ShowStatements() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_STATEMENTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowStatements(n0); }
}

ShowTables ShowTables() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_TABLES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowTables(n0); }
}

ShowTranIsolation ShowTranIsolation() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_TRAN_ISOLATION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowTranIsolation(n0); }
}

BeginTransaction BeginTransaction() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BEGIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            n5=<TRANSACTION_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<TRAN_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<WORK_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
   )?
   
   { return new BeginTransaction(n0,n2); }
}

CommitTransaction CommitTransaction() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<COMMIT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<END_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         (
            n8=<TRANSACTION_> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10=<TRAN_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         |
            n12=<WORK_> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n6 = new NodeChoice(n11, 2); }
         )
         
      )
      { n5.addNode(n6); }
   )?
   
   { return new CommitTransaction(n0,n5); }
}

RollbackTransaction RollbackTransaction() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ROLLBACK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            n5=<TRANSACTION_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<TRAN_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<WORK_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
   )?
   
   { return new RollbackTransaction(n0,n2); }
}

DescribeTable DescribeTable(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
}
{
   (
      (
         n2=<DESCRIBE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SHOW_TABLE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<SHOW_VIEW_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=TableName(prn)
   
   { return new DescribeTable(n0,n7); }
}

ShowConstraints ShowConstraints(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<SHOW_CONSTRAINTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ON_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new ShowConstraints(n0,n2,n4); }
}

ShowIndexes ShowIndexes(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<SHOW_INDEXES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ON_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new ShowIndexes(n0,n2,n4); }
}

ShowUsers ShowUsers(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_USERS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowUsers(n0); }
}

ShowViews ShowViews(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_VIEWS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowViews(n0); }
}

Deallocate Deallocate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<DEALLOCATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<PREPARE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   
   { return new Deallocate(n0,n2,n5); }
}

CreateUser CreateUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   n6=<PASSWORD_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   (
      (
         n11=<DBA_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9 = new NodeChoice(n10, 0); }
      |
         n13=<RESOURCE_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9 = new NodeChoice(n12, 1); }
      |
         n15=<STANDARD_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n9 = new NodeChoice(n14, 2); }
      )
      { n8.addNode(n9); }
   )?
   
   { return new CreateUser(n0,n2,n4,n5,n7,n8); }
}

DropUser DropUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new DropUser(n0,n2,n4); }
}

AlterUser AlterUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeOptional n10 = new NodeOptional();
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<ALTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<PASSWORD_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Identifier(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      (
         n13=<DBA_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11 = new NodeChoice(n12, 0); }
      |
         n15=<RESOURCE_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11 = new NodeChoice(n14, 1); }
      |
         n17=<STANDARD_> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11 = new NodeChoice(n16, 2); }
      )
      { n10.addNode(n11); }
   )?
   
   { return new AlterUser(n0,n2,n4,n5,n10); }
}

Grantee Grantee(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
}
{
   (
      n2=<PUBLIC_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=Identifier(prn)
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Grantee(n0); }
}

GranteeList GranteeList(PrintStream prn) :
{
   Grantee n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Grantee n5;

   {
   }
}
{
   n0=Grantee(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Grantee(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new GranteeList(n0,n1); }
}

TableListForGrant TableListForGrant(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Identifier n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
}
{
   (
      n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      n4=Identifier(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new TableListForGrant(n0); }
}

Privilege Privilege(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      n2=<SELECT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INSERT_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<UPDATE_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<DELETE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<REFERENCES_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<INDEX_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<ALTER_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new Privilege(n0); }
}

PrivilegeList PrivilegeList(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Privilege n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Privilege n9;

   {
   }
}
{
   (
      n2=<ALL_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      n4=Privilege(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Privilege(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PrivilegeList(n0); }
}

Grant Grant(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
}
{
   n1=<GRANT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrivilegeList(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<TABLE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=TableListForGrant(prn)
   n10=<TO_> { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=GranteeList(prn)
   
   { return new Grant(n0,n2,n3,n5,n8,n9,n11); }
}

Revoke Revoke(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
}
{
   n1=<REVOKE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrivilegeList(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<TABLE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=TableListForGrant(prn)
   n10=<FROM_> { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=GranteeList(prn)
   
   { return new Revoke(n0,n2,n3,n5,n8,n9,n11); }
}

Cluster Cluster(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
}
{
   n1=<CLUSTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8=<ON_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   
   { return new Cluster(n0,n2); }
}

Truncate Truncate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
}
{
   n1=<TRUNCATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TABLE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=TableName(prn)
   
   { return new Truncate(n0,n2,n5); }
}

Kill Kill(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1=<KILL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new Kill(n0,n2); }
}

Unlisten Unlisten(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<UNLISTEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=Identifier(prn)
         { n3 = new NodeChoice(n4, 0); }
      |
         n6=<STAR_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )?
   
   { return new Unlisten(n0,n2); }
}
